{"version":3,"sources":["webpack:///./src/assets/img/login/logo.png","webpack:///./src/pages/login.vue?2be1","webpack:///./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack:///./node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack:///./node_modules/vee-validate/dist/vee-validate.esm.js","webpack:///./src/pages/login.vue","webpack:///./src/pages/login.vue?4105"],"names":["module","exports","_hoisted_1","key","class","_hoisted_2","_hoisted_3","src","alt","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","render","_ctx","_cache","$props","$setup","$data","$options","_component_Field","_component_ErrorMessage","_component_Form","_component_SnackBar","isAuth","onSubmit","onLogin","default","as","modelValue","authData","login","$event","name","placeholder","autocomplete","rules","type","password","saved","disabled","loader","_","loginError","message","loginErrorMsg","_arrayWithHoles","arr","Array","isArray","_iterableToArrayLimit","i","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","value","length","err","_nonIterableRest","TypeError","_slicedToArray","arrayWithHoles","iterableToArrayLimit","unsupportedIterableToArray","nonIterableRest","isCallable","fn","isNullOrUndefined","undefined","isObject","obj","isIndex","Number","toNumber","n","parseFloat","isNaN","RULES","defineRule","id","validator","guardExtend","resolveRule","Error","FormContextKey","FieldContextKey","IS_ABSENT","isLocator","__locatorRef","isHTMLTag","tag","includes","isFileInputNode","attrs","isYupValidator","validate","hasCheckedAttr","isContainerValue","isEmptyContainer","Object","keys","isNotNestedPath","path","test","isNativeMultiSelect","el","isNativeSelect","multiple","tagName","isNativeMultiSelectNode","hasTruthyBindingValue","shouldHaveValueBinding","isFormSubmitEvent","evt","isEvent","target","Event","srcElement","isPropPresent","prop","cleanupNonNestedPath","replace","getFromPath","object","fallback","resolvedValue","split","filter","Boolean","reduce","acc","propKey","setInPath","unset","splice","unsetPath","pathValues","map","idx","slice","join","keysOf","record","injectWithSelf","symbol","def","vm","provides","warn","resolveNextCheckboxValue","currentValue","checkedValue","uncheckedValue","newVal","indexOf","throttle","func","limit","inThrottle","lastResult","args","context","this","setTimeout","apply","debounceAsync","inner","ms","timer","resolves","window","clearTimeout","result","forEach","r","Promise","resolve","normalizeChildren","slotProps","slots","_a","_b","getBoundValue","hasValueBinding","_value","normalizeEventValue","input","files","from","options","opt","selected","selectedOption","find","normalizeRules","defineProperty","writable","enumerable","configurable","_$$isNormalized","prev","curr","params","normalizeParams","buildParams","rule","parsedRule","parseRule","provided","mapValueToLocator","createLocator","RegExp","locator","crossTable","val","extractLocators","DEFAULT_CONFIG","generateMessage","field","bails","validateOnBlur","validateOnChange","validateOnInput","validateOnModelUpdate","currentConfig","assign","getConfig","async","shouldBail","formData","values","_validate","errors","valid","validateFieldWithYup","ctx","form","isValid","_generateFieldError","normalizedContext","rulesKeys","_test","error","opts","abortEarly","then","catch","fillTargetValues","fieldCtx","normalize","param","validateYupSchema","schema","errorObjects","results","messages","validateObjectSchema","paths","validations","_c","fieldResult","names","bailsMap","isAllValid","validationResults","all","klona","get","set","x","k","list","tmp","str","prototype","toString","create","__proto__","Set","add","Map","Date","source","flags","constructor","buffer","getOwnPropertySymbols","getOwnPropertyDescriptor","getOwnPropertyNames","hasOwnProperty","es6","equal","a","b","size","entries","has","ArrayBuffer","isView","valueOf","ID_COUNTER","useFieldState","init","initialValue","setInitialValue","_useFieldValue","standalone","errorMessage","setErrors","_useFieldErrors","meta","_useFieldMeta","MAX_SAFE_INTEGER","setState","state","touched","shouldInjectForm","modelRef","resolveInitialValue","initialValues","setFieldInitialValue","stageInitialValue","setFieldValue","pending","validated","dirty","immediate","flush","normalizeErrors","errorBag","setFieldErrorBag","API","sendInspectorState","INSPECTOR_ID","sendInspectorTree","useField","useCheckboxField","_useField","validateOnMount","label","validateOnValueUpdate","normalizeOptions","handleBlur","normalizedRules","rulesValue","extractRuleFromSchema","validateCurrentValue","mode","validateSchema","validateWithStateMutation","validateValidStateOnly","validate$1","handleChange","e","shouldValidate","newValue","setTouched","isTouched","unwatchValue","watchValue","deep","resetField","setValue","handleReset","oldValue","register","unregister","dependencies","rulesVal","deps","dep","depAcc","depName","depValue","oldDeps","defaults","valueProp","fieldName","patchCheckboxApi","checked","checkedVal","handleCheckboxChange","FieldImpl","inheritAttrs","props","String","required","Function","modelModifiers","hasModelEvents","validateField","onChangeHandler","emit","handleInput","onInputHandler","fieldProps","resolveValidationTriggers","baseOnBlur","onBlur","baseOnInput","onInput","baseOnChange","onChange","resolveTag","newModelValue","applyModifiers","expose","reset","children","modifiers","number","Field","FORM_COUNTER","useForm","formId","fieldsByPath","isSubmitting","submitCount","fieldArraysLookup","formValues","setErrorBag","useErrorBag","initialErrors","bag","getFirstFieldAtPath","fieldOrGroup","fieldExists","fieldNames","fieldBailsMap","originalInitialValues","setInitialValues","useFormInitialValues","useFormMeta","validationSchema","formCtx","registerField","unregisterField","setValues","setFieldError","setFieldTouched","resetForm","handleSubmit","unsetInitialValue","isFieldGroup","applyFieldMutation","mutation","fields","force","fieldInstance","clonedValue","f","insertFieldAtPath","rawField","fieldPath","fieldAtPath","removeFieldFromPath","findIndex","newPath","oldPath","initialErrorMessage","validation","every","onValidationError","preventDefault","stopPropagation","returnVal","_validateSchema","schemaValue","formResult","debouncedSchemaValidation","fieldsById","currentErrorsPaths","wasValidated","some","submitForm","submit","initialTouched","currentValues","MERGE_STRATEGIES","isDirty","flat","flag","mergeMethod","providedValues","updateFields","wasTouched","normalizeErrorItem","FormImpl","onInvalidSubmit","handleFormReset","onReset","handleScopedSlotSubmit","onSuccess","formAttrs","novalidate","Form","FIELD_ARRAY_COUNTER","useFieldArray","arrayPath","noOp","noOpApi","remove","swap","insert","update","prepend","entryCounter","initFields","createEntry","updateEntryFlags","fieldsLength","entry","isFirst","isLast","pathName","pathValue","normalizedPathValue","indexA","indexB","newFields","temp","tempEntry","unshift","ErrorMessageImpl","role","ErrorMessage","components","SnackBar","setup","store","router","getters","getLoader","commit","SET_LOADER","getLoginError","CLEAR_LOGIN_ERROR","dispatch","LOGIN","SET_SAVE_AUTH","SET_AUTH_LOGIN","GET_COMPANYS","GET_MANAGER","finally","isAuthenticated","getLoginErrorMsg","__exports__"],"mappings":"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","file":"js/chunk-19f2b86b.55c2157f.js","sourcesContent":["module.exports = __webpack_public_path__ + \"img/logo.53380819.png\";","import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, withCtx as _withCtx, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\"\nimport _imports_0 from '@/assets/img/login/logo.png'\n\n\nconst _hoisted_1 = {\n  key: 0,\n  class: \"authorization\"\n}\nconst _hoisted_2 = { class: \"authorization-body\" }\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", { class: \"authorization-logo\" }, [\n  /*#__PURE__*/_createElementVNode(\"img\", {\n    src: _imports_0,\n    alt: \"логотип\"\n  })\n], -1)\nconst _hoisted_4 = { class: \"authorization-check\" }\nconst _hoisted_5 = /*#__PURE__*/_createElementVNode(\"span\", { class: \"checkbox-custom\" }, null, -1)\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"span\", { class: \"check-txt\" }, \"Запомнить меня\", -1)\nconst _hoisted_7 = [\"disabled\"]\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"div\", { class: \"authorization-bottom\" }, \" Produced by Expert Workwear \", -1)\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_Field = _resolveComponent(\"Field\")!\n  const _component_ErrorMessage = _resolveComponent(\"ErrorMessage\")!\n  const _component_Form = _resolveComponent(\"Form\")!\n  const _component_SnackBar = _resolveComponent(\"SnackBar\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", null, [\n    (!_ctx.isAuth)\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n          _createElementVNode(\"div\", _hoisted_2, [\n            _hoisted_3,\n            _createVNode(_component_Form, {\n              onSubmit: _ctx.onLogin,\n              class: \"authorization-form\"\n            }, {\n              default: _withCtx(() => [\n                _createVNode(_component_Field, {\n                  as: \"input\",\n                  modelValue: _ctx.authData.login,\n                  \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((_ctx.authData.login) = $event)),\n                  class: \"authorization-input\",\n                  name: \"Login\",\n                  placeholder: \"Логин\",\n                  autocomplete: \"off\",\n                  rules: \"required|minLength:3\"\n                }, null, 8, [\"modelValue\"]),\n                _createVNode(_component_ErrorMessage, { name: \"Login\" }),\n                _createVNode(_component_Field, {\n                  as: \"input\",\n                  type: \"password\",\n                  modelValue: _ctx.authData.password,\n                  \"onUpdate:modelValue\": _cache[1] || (_cache[1] = ($event: any) => ((_ctx.authData.password) = $event)),\n                  class: \"authorization-input\",\n                  name: \"password\",\n                  placeholder: \"Пароль\",\n                  autocomplete: \"off\",\n                  rules: \"required|minLength:3\"\n                }, null, 8, [\"modelValue\"]),\n                _createElementVNode(\"label\", _hoisted_4, [\n                  _withDirectives(_createElementVNode(\"input\", {\n                    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = ($event: any) => ((_ctx.saved) = $event)),\n                    class: \"check-input\",\n                    type: \"checkbox\",\n                    name: \"remember\"\n                  }, null, 512), [\n                    [_vModelCheckbox, _ctx.saved]\n                  ]),\n                  _hoisted_5,\n                  _hoisted_6\n                ]),\n                _createElementVNode(\"button\", {\n                  class: \"authorization-btn\",\n                  type: \"submit\",\n                  disabled: _ctx.loader\n                }, \"Войти\", 8, _hoisted_7)\n              ]),\n              _: 1\n            }, 8, [\"onSubmit\"])\n          ]),\n          _hoisted_8\n        ]))\n      : _createCommentVNode(\"\", true),\n    _createVNode(_component_SnackBar, {\n      modelValue: _ctx.loginError,\n      \"onUpdate:modelValue\": _cache[3] || (_cache[3] = ($event: any) => ((_ctx.loginError) = $event)),\n      message: _ctx.loginErrorMsg\n    }, null, 8, [\"modelValue\", \"message\"])\n  ]))\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","/**\n  * vee-validate v4.5.4\n  * (c) 2021 Abdelrahman Awad\n  * @license MIT\n  */\nimport { inject, getCurrentInstance, warn as warn$1, ref, unref, computed, reactive, watch, onUnmounted, nextTick, onMounted, provide, isRef, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, markRaw, readonly } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\nfunction isCallable(fn) {\r\n    return typeof fn === 'function';\r\n}\r\nfunction isNullOrUndefined(value) {\r\n    return value === null || value === undefined;\r\n}\r\nconst isObject = (obj) => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\r\nfunction isIndex(value) {\r\n    return Number(value) >= 0;\r\n}\r\nfunction toNumber(value) {\r\n    const n = parseFloat(value);\r\n    return isNaN(n) ? value : n;\r\n}\n\nconst RULES = {};\r\n/**\r\n * Adds a custom validator to the list of validation rules.\r\n */\r\nfunction defineRule(id, validator) {\r\n    // makes sure new rules are properly formatted.\r\n    guardExtend(id, validator);\r\n    RULES[id] = validator;\r\n}\r\n/**\r\n * Gets an already defined rule\r\n */\r\nfunction resolveRule(id) {\r\n    return RULES[id];\r\n}\r\n/**\r\n * Guards from extension violations.\r\n */\r\nfunction guardExtend(id, validator) {\r\n    if (isCallable(validator)) {\r\n        return;\r\n    }\r\n    throw new Error(`Extension Error: The validator '${id}' must be a function.`);\r\n}\n\nconst FormContextKey = Symbol('vee-validate-form');\r\nconst FieldContextKey = Symbol('vee-validate-field-instance');\r\nconst IS_ABSENT = Symbol('Default empty value');\n\nfunction isLocator(value) {\r\n    return isCallable(value) && !!value.__locatorRef;\r\n}\r\n/**\r\n * Checks if an tag name is a native HTML tag and not a Vue component\r\n */\r\nfunction isHTMLTag(tag) {\r\n    return ['input', 'textarea', 'select'].includes(tag);\r\n}\r\n/**\r\n * Checks if an input is of type file\r\n */\r\nfunction isFileInputNode(tag, attrs) {\r\n    return isHTMLTag(tag) && attrs.type === 'file';\r\n}\r\nfunction isYupValidator(value) {\r\n    return !!value && isCallable(value.validate);\r\n}\r\nfunction hasCheckedAttr(type) {\r\n    return type === 'checkbox' || type === 'radio';\r\n}\r\nfunction isContainerValue(value) {\r\n    return isObject(value) || Array.isArray(value);\r\n}\r\n/**\r\n * True if the value is an empty object or array\r\n */\r\nfunction isEmptyContainer(value) {\r\n    if (Array.isArray(value)) {\r\n        return value.length === 0;\r\n    }\r\n    return isObject(value) && Object.keys(value).length === 0;\r\n}\r\n/**\r\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\r\n */\r\nfunction isNotNestedPath(path) {\r\n    return /^\\[.+\\]$/i.test(path);\r\n}\r\n/**\r\n * Checks if an element is a native HTML5 multi-select input element\r\n */\r\nfunction isNativeMultiSelect(el) {\r\n    return isNativeSelect(el) && el.multiple;\r\n}\r\n/**\r\n * Checks if an element is a native HTML5 select input element\r\n */\r\nfunction isNativeSelect(el) {\r\n    return el.tagName === 'SELECT';\r\n}\r\n/**\r\n * Checks if a tag name with attrs object will render a native multi-select element\r\n */\r\nfunction isNativeMultiSelectNode(tag, attrs) {\r\n    // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\r\n    const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\r\n    return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\r\n}\r\n/**\r\n * Checks if a node should have a `:value` binding or not\r\n *\r\n * These nodes should not have a value binding\r\n * For files, because they are not reactive\r\n * For multi-selects because the value binding will reset the value\r\n */\r\nfunction shouldHaveValueBinding(tag, attrs) {\r\n    return isNativeMultiSelectNode(tag, attrs) || isFileInputNode(tag, attrs);\r\n}\r\nfunction isFormSubmitEvent(evt) {\r\n    return isEvent(evt) && evt.target && 'submit' in evt.target;\r\n}\r\nfunction isEvent(evt) {\r\n    if (!evt) {\r\n        return false;\r\n    }\r\n    if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\r\n        return true;\r\n    }\r\n    // this is for IE and Cypress #3161\r\n    /* istanbul ignore next */\r\n    if (evt && evt.srcElement) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isPropPresent(obj, prop) {\r\n    return prop in obj && obj[prop] !== IS_ABSENT;\r\n}\n\nfunction cleanupNonNestedPath(path) {\r\n    if (isNotNestedPath(path)) {\r\n        return path.replace(/\\[|\\]/gi, '');\r\n    }\r\n    return path;\r\n}\r\nfunction getFromPath(object, path, fallback) {\r\n    if (!object) {\r\n        return fallback;\r\n    }\r\n    if (isNotNestedPath(path)) {\r\n        return object[cleanupNonNestedPath(path)];\r\n    }\r\n    const resolvedValue = (path || '')\r\n        .split(/\\.|\\[(\\d+)\\]/)\r\n        .filter(Boolean)\r\n        .reduce((acc, propKey) => {\r\n        if (isContainerValue(acc) && propKey in acc) {\r\n            return acc[propKey];\r\n        }\r\n        return fallback;\r\n    }, object);\r\n    return resolvedValue;\r\n}\r\n/**\r\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\r\n */\r\nfunction setInPath(object, path, value) {\r\n    if (isNotNestedPath(path)) {\r\n        object[cleanupNonNestedPath(path)] = value;\r\n        return;\r\n    }\r\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\r\n    let acc = object;\r\n    for (let i = 0; i < keys.length; i++) {\r\n        // Last key, set it\r\n        if (i === keys.length - 1) {\r\n            acc[keys[i]] = value;\r\n            return;\r\n        }\r\n        // Key does not exist, create a container for it\r\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\r\n            // container can be either an object or an array depending on the next key if it exists\r\n            acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\r\n        }\r\n        acc = acc[keys[i]];\r\n    }\r\n}\r\nfunction unset(object, key) {\r\n    if (Array.isArray(object) && isIndex(key)) {\r\n        object.splice(Number(key), 1);\r\n        return;\r\n    }\r\n    if (isObject(object)) {\r\n        delete object[key];\r\n    }\r\n}\r\n/**\r\n * Removes a nested property from object\r\n */\r\nfunction unsetPath(object, path) {\r\n    if (isNotNestedPath(path)) {\r\n        delete object[cleanupNonNestedPath(path)];\r\n        return;\r\n    }\r\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\r\n    let acc = object;\r\n    for (let i = 0; i < keys.length; i++) {\r\n        // Last key, unset it\r\n        if (i === keys.length - 1) {\r\n            unset(acc, keys[i]);\r\n            break;\r\n        }\r\n        // Key does not exist, exit\r\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\r\n            break;\r\n        }\r\n        acc = acc[keys[i]];\r\n    }\r\n    const pathValues = keys.map((_, idx) => {\r\n        return getFromPath(object, keys.slice(0, idx).join('.'));\r\n    });\r\n    for (let i = pathValues.length - 1; i >= 0; i--) {\r\n        if (!isEmptyContainer(pathValues[i])) {\r\n            continue;\r\n        }\r\n        if (i === 0) {\r\n            unset(object, keys[0]);\r\n            continue;\r\n        }\r\n        unset(pathValues[i - 1], keys[i - 1]);\r\n    }\r\n}\r\n/**\r\n * A typed version of Object.keys\r\n */\r\nfunction keysOf(record) {\r\n    return Object.keys(record);\r\n}\r\n// Uses same component provide as its own injections\r\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\r\nfunction injectWithSelf(symbol, def = undefined) {\r\n    const vm = getCurrentInstance();\r\n    return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\r\n}\r\nfunction warn(message) {\r\n    warn$1(`[vee-validate]: ${message}`);\r\n}\r\n/**\r\n * Ensures we deal with a singular field value\r\n */\r\nfunction normalizeField(field) {\r\n    if (Array.isArray(field)) {\r\n        return field[0];\r\n    }\r\n    return field;\r\n}\r\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\r\n    if (Array.isArray(currentValue)) {\r\n        const newVal = [...currentValue];\r\n        const idx = newVal.indexOf(checkedValue);\r\n        idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\r\n        return newVal;\r\n    }\r\n    return currentValue === checkedValue ? uncheckedValue : checkedValue;\r\n}\r\n/**\r\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\r\n * (`limit`)\r\n */\r\nfunction throttle(func, limit) {\r\n    let inThrottle;\r\n    let lastResult;\r\n    return function (...args) {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const context = this;\r\n        if (!inThrottle) {\r\n            inThrottle = true;\r\n            setTimeout(() => (inThrottle = false), limit);\r\n            lastResult = func.apply(context, args);\r\n        }\r\n        return lastResult;\r\n    };\r\n}\r\nfunction debounceAsync(inner, ms = 0) {\r\n    let timer = null;\r\n    let resolves = [];\r\n    return function (...args) {\r\n        // Run the function after a certain amount of time\r\n        if (timer) {\r\n            window.clearTimeout(timer);\r\n        }\r\n        timer = window.setTimeout(() => {\r\n            // Get the result of the inner function, then apply it to the resolve function of\r\n            // each promise that has been created since the last time the inner function was run\r\n            const result = inner(...args);\r\n            resolves.forEach(r => r(result));\r\n            resolves = [];\r\n        }, ms);\r\n        return new Promise(resolve => resolves.push(resolve));\r\n    };\r\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst normalizeChildren = (tag, context, slotProps) => {\r\n    if (!context.slots.default) {\r\n        return context.slots.default;\r\n    }\r\n    if (typeof tag === 'string' || !tag) {\r\n        return context.slots.default(slotProps());\r\n    }\r\n    return {\r\n        default: () => { var _a, _b; return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps()); },\r\n    };\r\n};\r\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\r\nfunction getBoundValue(el) {\r\n    if (hasValueBinding(el)) {\r\n        return el._value;\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\r\nfunction hasValueBinding(el) {\r\n    return '_value' in el;\r\n}\n\nfunction normalizeEventValue(value) {\r\n    if (!isEvent(value)) {\r\n        return value;\r\n    }\r\n    const input = value.target;\r\n    // Vue sets the current bound value on `_value` prop\r\n    // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\r\n    if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\r\n        return getBoundValue(input);\r\n    }\r\n    if (input.type === 'file' && input.files) {\r\n        return Array.from(input.files);\r\n    }\r\n    if (isNativeMultiSelect(input)) {\r\n        return Array.from(input.options)\r\n            .filter(opt => opt.selected && !opt.disabled)\r\n            .map(getBoundValue);\r\n    }\r\n    // makes sure we get the actual `option` bound value\r\n    // #3440\r\n    if (isNativeSelect(input)) {\r\n        const selectedOption = Array.from(input.options).find(opt => opt.selected);\r\n        return selectedOption ? getBoundValue(selectedOption) : input.value;\r\n    }\r\n    return input.value;\r\n}\n\n/**\r\n * Normalizes the given rules expression.\r\n */\r\nfunction normalizeRules(rules) {\r\n    const acc = {};\r\n    Object.defineProperty(acc, '_$$isNormalized', {\r\n        value: true,\r\n        writable: false,\r\n        enumerable: false,\r\n        configurable: false,\r\n    });\r\n    if (!rules) {\r\n        return acc;\r\n    }\r\n    // Object is already normalized, skip.\r\n    if (isObject(rules) && rules._$$isNormalized) {\r\n        return rules;\r\n    }\r\n    if (isObject(rules)) {\r\n        return Object.keys(rules).reduce((prev, curr) => {\r\n            const params = normalizeParams(rules[curr]);\r\n            if (rules[curr] !== false) {\r\n                prev[curr] = buildParams(params);\r\n            }\r\n            return prev;\r\n        }, acc);\r\n    }\r\n    /* istanbul ignore if */\r\n    if (typeof rules !== 'string') {\r\n        return acc;\r\n    }\r\n    return rules.split('|').reduce((prev, rule) => {\r\n        const parsedRule = parseRule(rule);\r\n        if (!parsedRule.name) {\r\n            return prev;\r\n        }\r\n        prev[parsedRule.name] = buildParams(parsedRule.params);\r\n        return prev;\r\n    }, acc);\r\n}\r\n/**\r\n * Normalizes a rule param.\r\n */\r\nfunction normalizeParams(params) {\r\n    if (params === true) {\r\n        return [];\r\n    }\r\n    if (Array.isArray(params)) {\r\n        return params;\r\n    }\r\n    if (isObject(params)) {\r\n        return params;\r\n    }\r\n    return [params];\r\n}\r\nfunction buildParams(provided) {\r\n    const mapValueToLocator = (value) => {\r\n        // A target param using interpolation\r\n        if (typeof value === 'string' && value[0] === '@') {\r\n            return createLocator(value.slice(1));\r\n        }\r\n        return value;\r\n    };\r\n    if (Array.isArray(provided)) {\r\n        return provided.map(mapValueToLocator);\r\n    }\r\n    // #3073\r\n    if (provided instanceof RegExp) {\r\n        return [provided];\r\n    }\r\n    return Object.keys(provided).reduce((prev, key) => {\r\n        prev[key] = mapValueToLocator(provided[key]);\r\n        return prev;\r\n    }, {});\r\n}\r\n/**\r\n * Parses a rule string expression.\r\n */\r\nconst parseRule = (rule) => {\r\n    let params = [];\r\n    const name = rule.split(':')[0];\r\n    if (rule.includes(':')) {\r\n        params = rule.split(':').slice(1).join(':').split(',');\r\n    }\r\n    return { name, params };\r\n};\r\nfunction createLocator(value) {\r\n    const locator = (crossTable) => {\r\n        const val = getFromPath(crossTable, value) || crossTable[value];\r\n        return val;\r\n    };\r\n    locator.__locatorRef = value;\r\n    return locator;\r\n}\r\nfunction extractLocators(params) {\r\n    if (Array.isArray(params)) {\r\n        return params.filter(isLocator);\r\n    }\r\n    return keysOf(params)\r\n        .filter(key => isLocator(params[key]))\r\n        .map(key => params[key]);\r\n}\n\nconst DEFAULT_CONFIG = {\r\n    generateMessage: ({ field }) => `${field} is not valid.`,\r\n    bails: true,\r\n    validateOnBlur: true,\r\n    validateOnChange: true,\r\n    validateOnInput: false,\r\n    validateOnModelUpdate: true,\r\n};\r\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\r\nconst getConfig = () => currentConfig;\r\nconst setConfig = (newConf) => {\r\n    currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\r\n};\r\nconst configure = setConfig;\n\n/**\r\n * Validates a value against the rules.\r\n */\r\nasync function validate(value, rules, options = {}) {\r\n    const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\r\n    const field = {\r\n        name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\r\n        rules,\r\n        bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\r\n        formData: (options === null || options === void 0 ? void 0 : options.values) || {},\r\n    };\r\n    const result = await _validate(field, value);\r\n    const errors = result.errors;\r\n    return {\r\n        errors,\r\n        valid: !errors.length,\r\n    };\r\n}\r\n/**\r\n * Starts the validation process.\r\n */\r\nasync function _validate(field, value) {\r\n    if (isYupValidator(field.rules)) {\r\n        return validateFieldWithYup(value, field.rules, { bails: field.bails });\r\n    }\r\n    // if a generic function, use it as the pipeline.\r\n    if (isCallable(field.rules)) {\r\n        const ctx = {\r\n            field: field.name,\r\n            form: field.formData,\r\n            value: value,\r\n        };\r\n        const result = await field.rules(value, ctx);\r\n        const isValid = typeof result !== 'string' && result;\r\n        const message = typeof result === 'string' ? result : _generateFieldError(ctx);\r\n        return {\r\n            errors: !isValid ? [message] : [],\r\n        };\r\n    }\r\n    const normalizedContext = Object.assign(Object.assign({}, field), { rules: normalizeRules(field.rules) });\r\n    const errors = [];\r\n    const rulesKeys = Object.keys(normalizedContext.rules);\r\n    const length = rulesKeys.length;\r\n    for (let i = 0; i < length; i++) {\r\n        const rule = rulesKeys[i];\r\n        const result = await _test(normalizedContext, value, {\r\n            name: rule,\r\n            params: normalizedContext.rules[rule],\r\n        });\r\n        if (result.error) {\r\n            errors.push(result.error);\r\n            if (field.bails) {\r\n                return {\r\n                    errors,\r\n                };\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        errors,\r\n    };\r\n}\r\n/**\r\n * Handles yup validation\r\n */\r\nasync function validateFieldWithYup(value, validator, opts) {\r\n    var _a;\r\n    const errors = await validator\r\n        .validate(value, {\r\n        abortEarly: (_a = opts.bails) !== null && _a !== void 0 ? _a : true,\r\n    })\r\n        .then(() => [])\r\n        .catch((err) => {\r\n        // Yup errors have a name prop one them.\r\n        // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\r\n        if (err.name === 'ValidationError') {\r\n            return err.errors;\r\n        }\r\n        // re-throw the error so we don't hide it\r\n        throw err;\r\n    });\r\n    return {\r\n        errors,\r\n    };\r\n}\r\n/**\r\n * Tests a single input value against a rule.\r\n */\r\nasync function _test(field, value, rule) {\r\n    const validator = resolveRule(rule.name);\r\n    if (!validator) {\r\n        throw new Error(`No such validator '${rule.name}' exists.`);\r\n    }\r\n    const params = fillTargetValues(rule.params, field.formData);\r\n    const ctx = {\r\n        field: field.name,\r\n        value,\r\n        form: field.formData,\r\n        rule: Object.assign(Object.assign({}, rule), { params }),\r\n    };\r\n    const result = await validator(value, params, ctx);\r\n    if (typeof result === 'string') {\r\n        return {\r\n            error: result,\r\n        };\r\n    }\r\n    return {\r\n        error: result ? undefined : _generateFieldError(ctx),\r\n    };\r\n}\r\n/**\r\n * Generates error messages.\r\n */\r\nfunction _generateFieldError(fieldCtx) {\r\n    const message = getConfig().generateMessage;\r\n    if (!message) {\r\n        return 'Field is invalid';\r\n    }\r\n    return message(fieldCtx);\r\n}\r\nfunction fillTargetValues(params, crossTable) {\r\n    const normalize = (value) => {\r\n        if (isLocator(value)) {\r\n            return value(crossTable);\r\n        }\r\n        return value;\r\n    };\r\n    if (Array.isArray(params)) {\r\n        return params.map(normalize);\r\n    }\r\n    return Object.keys(params).reduce((acc, param) => {\r\n        acc[param] = normalize(params[param]);\r\n        return acc;\r\n    }, {});\r\n}\r\nasync function validateYupSchema(schema, values) {\r\n    const errorObjects = await schema\r\n        .validate(values, { abortEarly: false })\r\n        .then(() => [])\r\n        .catch((err) => {\r\n        // Yup errors have a name prop one them.\r\n        // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\r\n        if (err.name !== 'ValidationError') {\r\n            throw err;\r\n        }\r\n        // list of aggregated errors\r\n        return err.inner || [];\r\n    });\r\n    const results = {};\r\n    const errors = {};\r\n    for (const error of errorObjects) {\r\n        const messages = error.errors;\r\n        results[error.path] = { valid: !messages.length, errors: messages };\r\n        if (messages.length) {\r\n            errors[error.path] = messages[0];\r\n        }\r\n    }\r\n    return {\r\n        valid: !errorObjects.length,\r\n        results,\r\n        errors,\r\n    };\r\n}\r\nasync function validateObjectSchema(schema, values, opts) {\r\n    const paths = keysOf(schema);\r\n    const validations = paths.map(async (path) => {\r\n        var _a, _b, _c;\r\n        const fieldResult = await validate(getFromPath(values, path), schema[path], {\r\n            name: ((_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path]) || path,\r\n            values: values,\r\n            bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true,\r\n        });\r\n        return Object.assign(Object.assign({}, fieldResult), { path });\r\n    });\r\n    let isAllValid = true;\r\n    const validationResults = await Promise.all(validations);\r\n    const results = {};\r\n    const errors = {};\r\n    for (const result of validationResults) {\r\n        results[result.path] = {\r\n            valid: result.valid,\r\n            errors: result.errors,\r\n        };\r\n        if (!result.valid) {\r\n            isAllValid = false;\r\n            errors[result.path] = result.errors[0];\r\n        }\r\n    }\r\n    return {\r\n        valid: isAllValid,\r\n        results,\r\n        errors,\r\n    };\r\n}\n\nfunction set(obj, key, val) {\n\tif (typeof val.value === 'object') val.value = klona(val.value);\n\tif (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n\t\tObject.defineProperty(obj, key, val);\n\t} else obj[key] = val.value;\n}\n\nfunction klona(x) {\n\tif (typeof x !== 'object') return x;\n\n\tvar i=0, k, list, tmp, str=Object.prototype.toString.call(x);\n\n\tif (str === '[object Object]') {\n\t\ttmp = Object.create(x.__proto__ || null);\n\t} else if (str === '[object Array]') {\n\t\ttmp = Array(x.length);\n\t} else if (str === '[object Set]') {\n\t\ttmp = new Set;\n\t\tx.forEach(function (val) {\n\t\t\ttmp.add(klona(val));\n\t\t});\n\t} else if (str === '[object Map]') {\n\t\ttmp = new Map;\n\t\tx.forEach(function (val, key) {\n\t\t\ttmp.set(klona(key), klona(val));\n\t\t});\n\t} else if (str === '[object Date]') {\n\t\ttmp = new Date(+x);\n\t} else if (str === '[object RegExp]') {\n\t\ttmp = new RegExp(x.source, x.flags);\n\t} else if (str === '[object DataView]') {\n\t\ttmp = new x.constructor( klona(x.buffer) );\n\t} else if (str === '[object ArrayBuffer]') {\n\t\ttmp = x.slice(0);\n\t} else if (str.slice(-6) === 'Array]') {\n\t\t// ArrayBuffer.isView(x)\n\t\t// ~> `new` bcuz `Buffer.slice` => ref\n\t\ttmp = new x.constructor(x);\n\t}\n\n\tif (tmp) {\n\t\tfor (list=Object.getOwnPropertySymbols(x); i < list.length; i++) {\n\t\t\tset(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n\t\t}\n\n\t\tfor (i=0, list=Object.getOwnPropertyNames(x); i < list.length; i++) {\n\t\t\tif (Object.hasOwnProperty.call(tmp, k=list[i]) && tmp[k] === x[k]) continue;\n\t\t\tset(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n\t\t}\n\t}\n\n\treturn tmp || x;\n}\n\nvar es6 = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n    if ((a instanceof Map) && (b instanceof Map)) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries())\n        if (!b.has(i[0])) return false;\n      for (i of a.entries())\n        if (!equal(i[1], b.get(i[0]))) return false;\n      return true;\n    }\n\n    if ((a instanceof Set) && (b instanceof Set)) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries())\n        if (!b.has(i[0])) return false;\n      return true;\n    }\n\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (a[i] !== b[i]) return false;\n      return true;\n    }\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n\nlet ID_COUNTER = 0;\r\nfunction useFieldState(path, init) {\r\n    const { value, initialValue, setInitialValue } = _useFieldValue(path, init.modelValue, !init.standalone);\r\n    const { errorMessage, errors, setErrors } = _useFieldErrors(path, !init.standalone);\r\n    const meta = _useFieldMeta(value, initialValue, errors);\r\n    const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\r\n    function setState(state) {\r\n        var _a;\r\n        if ('value' in state) {\r\n            value.value = state.value;\r\n        }\r\n        if ('errors' in state) {\r\n            setErrors(state.errors);\r\n        }\r\n        if ('touched' in state) {\r\n            meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\r\n        }\r\n        if ('initialValue' in state) {\r\n            setInitialValue(state.initialValue);\r\n        }\r\n    }\r\n    return {\r\n        id,\r\n        path,\r\n        value,\r\n        initialValue,\r\n        meta,\r\n        errors,\r\n        errorMessage,\r\n        setState,\r\n    };\r\n}\r\n/**\r\n * Creates the field value and resolves the initial value\r\n */\r\nfunction _useFieldValue(path, modelValue, shouldInjectForm) {\r\n    const form = shouldInjectForm ? injectWithSelf(FormContextKey, undefined) : undefined;\r\n    const modelRef = ref(unref(modelValue));\r\n    function resolveInitialValue() {\r\n        if (!form) {\r\n            return unref(modelRef);\r\n        }\r\n        return getFromPath(form.meta.value.initialValues, unref(path), unref(modelRef));\r\n    }\r\n    function setInitialValue(value) {\r\n        if (!form) {\r\n            modelRef.value = value;\r\n            return;\r\n        }\r\n        form.setFieldInitialValue(unref(path), value);\r\n    }\r\n    const initialValue = computed(resolveInitialValue);\r\n    // if no form is associated, use a regular ref.\r\n    if (!form) {\r\n        const value = ref(resolveInitialValue());\r\n        return {\r\n            value,\r\n            initialValue,\r\n            setInitialValue,\r\n        };\r\n    }\r\n    // to set the initial value, first check if there is a current value, if there is then use it.\r\n    // otherwise use the configured initial value if it exists.\r\n    // prioritize model value over form values\r\n    // #3429\r\n    const currentValue = modelValue ? unref(modelValue) : getFromPath(form.values, unref(path), unref(initialValue));\r\n    form.stageInitialValue(unref(path), currentValue);\r\n    // otherwise use a computed setter that triggers the `setFieldValue`\r\n    const value = computed({\r\n        get() {\r\n            return getFromPath(form.values, unref(path));\r\n        },\r\n        set(newVal) {\r\n            form.setFieldValue(unref(path), newVal);\r\n        },\r\n    });\r\n    return {\r\n        value,\r\n        initialValue,\r\n        setInitialValue,\r\n    };\r\n}\r\n/**\r\n * Creates meta flags state and some associated effects with them\r\n */\r\nfunction _useFieldMeta(currentValue, initialValue, errors) {\r\n    const meta = reactive({\r\n        touched: false,\r\n        pending: false,\r\n        valid: true,\r\n        validated: !!unref(errors).length,\r\n        initialValue: computed(() => unref(initialValue)),\r\n        dirty: computed(() => {\r\n            return !es6(unref(currentValue), unref(initialValue));\r\n        }),\r\n    });\r\n    watch(errors, value => {\r\n        meta.valid = !value.length;\r\n    }, {\r\n        immediate: true,\r\n        flush: 'sync',\r\n    });\r\n    return meta;\r\n}\r\n/**\r\n * Creates the error message state for the field state\r\n */\r\nfunction _useFieldErrors(path, shouldInjectForm) {\r\n    const form = shouldInjectForm ? injectWithSelf(FormContextKey, undefined) : undefined;\r\n    function normalizeErrors(messages) {\r\n        if (!messages) {\r\n            return [];\r\n        }\r\n        return Array.isArray(messages) ? messages : [messages];\r\n    }\r\n    if (!form) {\r\n        const errors = ref([]);\r\n        return {\r\n            errors,\r\n            errorMessage: computed(() => errors.value[0]),\r\n            setErrors: (messages) => {\r\n                errors.value = normalizeErrors(messages);\r\n            },\r\n        };\r\n    }\r\n    const errors = computed(() => form.errorBag.value[unref(path)] || []);\r\n    return {\r\n        errors,\r\n        errorMessage: computed(() => errors.value[0]),\r\n        setErrors: (messages) => {\r\n            form.setFieldErrorBag(unref(path), normalizeErrors(messages));\r\n        },\r\n    };\r\n}\n\nfunction installDevtoolsPlugin(app) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        setupDevtoolsPlugin({\r\n            id: 'vee-validate-devtools-plugin',\r\n            label: 'VeeValidate Plugin',\r\n            packageName: 'vee-validate',\r\n            homepage: 'https://vee-validate.logaretm.com/v4',\r\n            app,\r\n            logo: 'https://vee-validate.logaretm.com/v4/logo.png',\r\n        }, setupApiHooks);\r\n    }\r\n}\r\nconst DEVTOOLS_FORMS = {};\r\nconst DEVTOOLS_FIELDS = {};\r\nlet API;\r\nconst refreshInspector = throttle(() => {\r\n    setTimeout(async () => {\r\n        await nextTick();\r\n        API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\r\n        API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\r\n    }, 100);\r\n}, 100);\r\nfunction registerFormWithDevTools(form) {\r\n    const vm = getCurrentInstance();\r\n    if (!API) {\r\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\r\n        if (!app) {\r\n            return;\r\n        }\r\n        installDevtoolsPlugin(app);\r\n    }\r\n    DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\r\n    DEVTOOLS_FORMS[form.formId]._vm = vm;\r\n    onUnmounted(() => {\r\n        delete DEVTOOLS_FORMS[form.formId];\r\n        refreshInspector();\r\n    });\r\n    refreshInspector();\r\n}\r\nfunction registerSingleFieldWithDevtools(field) {\r\n    const vm = getCurrentInstance();\r\n    if (!API) {\r\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\r\n        if (!app) {\r\n            return;\r\n        }\r\n        installDevtoolsPlugin(app);\r\n    }\r\n    DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\r\n    DEVTOOLS_FIELDS[field.id]._vm = vm;\r\n    onUnmounted(() => {\r\n        delete DEVTOOLS_FIELDS[field.id];\r\n        refreshInspector();\r\n    });\r\n    refreshInspector();\r\n}\r\nconst INSPECTOR_ID = 'vee-validate-inspector';\r\nconst COLORS = {\r\n    error: 0xbd4b4b,\r\n    success: 0x06d77b,\r\n    unknown: 0x54436b,\r\n    white: 0xffffff,\r\n    black: 0x000000,\r\n    blue: 0x035397,\r\n    purple: 0xb980f0,\r\n    orange: 0xf5a962,\r\n    gray: 0xbbbfca,\r\n};\r\nlet SELECTED_NODE = null;\r\nfunction setupApiHooks(api) {\r\n    API = api;\r\n    api.addInspector({\r\n        id: INSPECTOR_ID,\r\n        icon: 'rule',\r\n        label: 'vee-validate',\r\n        noSelectionText: 'Select a vee-validate node to inspect',\r\n        actions: [\r\n            {\r\n                icon: 'done_outline',\r\n                tooltip: 'Validate selected item',\r\n                action: async () => {\r\n                    if (!SELECTED_NODE) {\r\n                        console.error('There is not a valid selected vee-validate node or component');\r\n                        return;\r\n                    }\r\n                    const result = await SELECTED_NODE.validate();\r\n                    console.log(result);\r\n                },\r\n            },\r\n            {\r\n                icon: 'delete_sweep',\r\n                tooltip: 'Clear validation state of the selected item',\r\n                action: () => {\r\n                    if (!SELECTED_NODE) {\r\n                        console.error('There is not a valid selected vee-validate node or component');\r\n                        return;\r\n                    }\r\n                    if ('id' in SELECTED_NODE) {\r\n                        SELECTED_NODE.resetField();\r\n                        return;\r\n                    }\r\n                    SELECTED_NODE.resetForm();\r\n                },\r\n            },\r\n        ],\r\n    });\r\n    api.on.getInspectorTree(payload => {\r\n        if (payload.inspectorId !== INSPECTOR_ID) {\r\n            return;\r\n        }\r\n        const forms = Object.values(DEVTOOLS_FORMS);\r\n        const fields = Object.values(DEVTOOLS_FIELDS);\r\n        payload.rootNodes = [\r\n            ...forms.map(mapFormForDevtoolsInspector),\r\n            ...fields.map(field => mapFieldForDevtoolsInspector(field)),\r\n        ];\r\n    });\r\n    api.on.getInspectorState((payload, ctx) => {\r\n        if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\r\n            return;\r\n        }\r\n        const { form, field, type } = decodeNodeId(payload.nodeId);\r\n        if (form && type === 'form') {\r\n            payload.state = buildFormState(form);\r\n            SELECTED_NODE = form;\r\n            return;\r\n        }\r\n        if (field && type === 'field') {\r\n            payload.state = buildFieldState(field);\r\n            SELECTED_NODE = field;\r\n            return;\r\n        }\r\n        SELECTED_NODE = null;\r\n    });\r\n}\r\nfunction mapFormForDevtoolsInspector(form) {\r\n    const { textColor, bgColor } = getTagTheme(form);\r\n    const formTreeNodes = {};\r\n    Object.values(form.fieldsByPath.value).forEach(field => {\r\n        const fieldInstance = Array.isArray(field) ? field[0] : field;\r\n        if (!fieldInstance) {\r\n            return;\r\n        }\r\n        setInPath(formTreeNodes, unref(fieldInstance.name), mapFieldForDevtoolsInspector(fieldInstance, form));\r\n    });\r\n    function buildFormTree(tree, path = []) {\r\n        const key = [...path].pop();\r\n        if ('id' in tree) {\r\n            return Object.assign(Object.assign({}, tree), { label: key || tree.label });\r\n        }\r\n        if (isObject(tree)) {\r\n            return {\r\n                id: `${path.join('.')}`,\r\n                label: key || '',\r\n                children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key])),\r\n            };\r\n        }\r\n        if (Array.isArray(tree)) {\r\n            return {\r\n                id: `${path.join('.')}`,\r\n                label: `${key}[]`,\r\n                children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)])),\r\n            };\r\n        }\r\n        return { id: '', label: '', children: [] };\r\n    }\r\n    const { children } = buildFormTree(formTreeNodes);\r\n    return {\r\n        id: encodeNodeId(form),\r\n        label: 'Form',\r\n        children,\r\n        tags: [\r\n            {\r\n                label: 'Form',\r\n                textColor,\r\n                backgroundColor: bgColor,\r\n            },\r\n            {\r\n                label: `${Object.keys(form.fieldsByPath.value).length} fields`,\r\n                textColor: COLORS.white,\r\n                backgroundColor: COLORS.unknown,\r\n            },\r\n        ],\r\n    };\r\n}\r\nfunction mapFieldForDevtoolsInspector(field, form) {\r\n    const fieldInstance = normalizeField(field);\r\n    const { textColor, bgColor } = getTagTheme(fieldInstance);\r\n    const isGroup = Array.isArray(field) && field.length > 1;\r\n    return {\r\n        id: encodeNodeId(form, fieldInstance, !isGroup),\r\n        label: unref(fieldInstance.name),\r\n        children: Array.isArray(field) ? field.map(fieldItem => mapFieldForDevtoolsInspector(fieldItem, form)) : undefined,\r\n        tags: [\r\n            isGroup\r\n                ? undefined\r\n                : {\r\n                    label: 'Field',\r\n                    textColor,\r\n                    backgroundColor: bgColor,\r\n                },\r\n            !form\r\n                ? {\r\n                    label: 'Standalone',\r\n                    textColor: COLORS.black,\r\n                    backgroundColor: COLORS.gray,\r\n                }\r\n                : undefined,\r\n            !isGroup && fieldInstance.type === 'checkbox'\r\n                ? {\r\n                    label: 'Checkbox',\r\n                    textColor: COLORS.white,\r\n                    backgroundColor: COLORS.blue,\r\n                }\r\n                : undefined,\r\n            !isGroup && fieldInstance.type === 'radio'\r\n                ? {\r\n                    label: 'Radio',\r\n                    textColor: COLORS.white,\r\n                    backgroundColor: COLORS.purple,\r\n                }\r\n                : undefined,\r\n            isGroup\r\n                ? {\r\n                    label: 'Group',\r\n                    textColor: COLORS.black,\r\n                    backgroundColor: COLORS.orange,\r\n                }\r\n                : undefined,\r\n        ].filter(Boolean),\r\n    };\r\n}\r\nfunction encodeNodeId(form, field, encodeIndex = true) {\r\n    const fieldPath = form ? unref(field === null || field === void 0 ? void 0 : field.name) : field === null || field === void 0 ? void 0 : field.id;\r\n    const fieldGroup = fieldPath ? form === null || form === void 0 ? void 0 : form.fieldsByPath.value[fieldPath] : undefined;\r\n    let idx;\r\n    if (encodeIndex && field && Array.isArray(fieldGroup)) {\r\n        idx = fieldGroup.indexOf(field);\r\n    }\r\n    const idObject = { f: form === null || form === void 0 ? void 0 : form.formId, ff: fieldPath, idx, type: field ? 'field' : 'form' };\r\n    return btoa(JSON.stringify(idObject));\r\n}\r\nfunction decodeNodeId(nodeId) {\r\n    try {\r\n        const idObject = JSON.parse(atob(nodeId));\r\n        const form = DEVTOOLS_FORMS[idObject.f];\r\n        if (!form && idObject.ff) {\r\n            const field = DEVTOOLS_FIELDS[idObject.ff];\r\n            if (!field) {\r\n                return {};\r\n            }\r\n            return {\r\n                type: idObject.type,\r\n                field,\r\n            };\r\n        }\r\n        if (!form) {\r\n            return {};\r\n        }\r\n        const fieldGroup = form.fieldsByPath.value[idObject.ff];\r\n        return {\r\n            type: idObject.type,\r\n            form,\r\n            field: Array.isArray(fieldGroup) ? fieldGroup[idObject.idx || 0] : fieldGroup,\r\n        };\r\n    }\r\n    catch (err) {\r\n        // console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\r\n    }\r\n    return {};\r\n}\r\nfunction buildFieldState(field) {\r\n    const { errors, meta, value } = field;\r\n    return {\r\n        'Field state': [\r\n            { key: 'errors', value: errors.value },\r\n            {\r\n                key: 'initialValue',\r\n                value: meta.initialValue,\r\n            },\r\n            {\r\n                key: 'currentValue',\r\n                value: value.value,\r\n            },\r\n            {\r\n                key: 'touched',\r\n                value: meta.touched,\r\n            },\r\n            {\r\n                key: 'dirty',\r\n                value: meta.dirty,\r\n            },\r\n            {\r\n                key: 'valid',\r\n                value: meta.valid,\r\n            },\r\n        ],\r\n    };\r\n}\r\nfunction buildFormState(form) {\r\n    const { errorBag, meta, values, isSubmitting, submitCount } = form;\r\n    return {\r\n        'Form state': [\r\n            {\r\n                key: 'submitCount',\r\n                value: submitCount.value,\r\n            },\r\n            {\r\n                key: 'isSubmitting',\r\n                value: isSubmitting.value,\r\n            },\r\n            {\r\n                key: 'touched',\r\n                value: meta.value.touched,\r\n            },\r\n            {\r\n                key: 'dirty',\r\n                value: meta.value.dirty,\r\n            },\r\n            {\r\n                key: 'valid',\r\n                value: meta.value.valid,\r\n            },\r\n            {\r\n                key: 'initialValues',\r\n                value: meta.value.initialValues,\r\n            },\r\n            {\r\n                key: 'currentValues',\r\n                value: values,\r\n            },\r\n            {\r\n                key: 'errors',\r\n                value: keysOf(errorBag.value).reduce((acc, key) => {\r\n                    var _a;\r\n                    const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\r\n                    if (message) {\r\n                        acc[key] = message;\r\n                    }\r\n                    return acc;\r\n                }, {}),\r\n            },\r\n        ],\r\n    };\r\n}\r\n/**\r\n * Resolves the tag color based on the form state\r\n */\r\nfunction getTagTheme(fieldOrForm) {\r\n    // const fallbackColors = {\r\n    //   bgColor: COLORS.unknown,\r\n    //   textColor: COLORS.white,\r\n    // };\r\n    const isValid = 'id' in fieldOrForm ? fieldOrForm.meta.valid : fieldOrForm.meta.value.valid;\r\n    return {\r\n        bgColor: isValid ? COLORS.success : COLORS.error,\r\n        textColor: isValid ? COLORS.black : COLORS.white,\r\n    };\r\n}\n\n/**\r\n * Creates a field composite.\r\n */\r\nfunction useField(name, rules, opts) {\r\n    if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\r\n        return useCheckboxField(name, rules, opts);\r\n    }\r\n    return _useField(name, rules, opts);\r\n}\r\nfunction _useField(name, rules, opts) {\r\n    const { initialValue: modelValue, validateOnMount, bails, type, checkedValue, label, validateOnValueUpdate, uncheckedValue, standalone, } = normalizeOptions(unref(name), opts);\r\n    const form = !standalone ? injectWithSelf(FormContextKey) : undefined;\r\n    const { id, value, initialValue, meta, setState, errors, errorMessage } = useFieldState(name, {\r\n        modelValue,\r\n        standalone,\r\n    });\r\n    /**\r\n     * Handles common onBlur meta update\r\n     */\r\n    const handleBlur = () => {\r\n        meta.touched = true;\r\n    };\r\n    const normalizedRules = computed(() => {\r\n        let rulesValue = unref(rules);\r\n        const schema = unref(form === null || form === void 0 ? void 0 : form.schema);\r\n        if (schema && !isYupValidator(schema)) {\r\n            rulesValue = extractRuleFromSchema(schema, unref(name)) || rulesValue;\r\n        }\r\n        if (isYupValidator(rulesValue) || isCallable(rulesValue)) {\r\n            return rulesValue;\r\n        }\r\n        return normalizeRules(rulesValue);\r\n    });\r\n    async function validateCurrentValue(mode) {\r\n        var _a, _b;\r\n        if (form === null || form === void 0 ? void 0 : form.validateSchema) {\r\n            return (_a = (await form.validateSchema(mode)).results[unref(name)]) !== null && _a !== void 0 ? _a : { valid: true, errors: [] };\r\n        }\r\n        return validate(value.value, normalizedRules.value, {\r\n            name: unref(label) || unref(name),\r\n            values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\r\n            bails,\r\n        });\r\n    }\r\n    async function validateWithStateMutation() {\r\n        meta.pending = true;\r\n        meta.validated = true;\r\n        const result = await validateCurrentValue('validated-only');\r\n        setState({ errors: result.errors });\r\n        meta.pending = false;\r\n        return result;\r\n    }\r\n    async function validateValidStateOnly() {\r\n        const result = await validateCurrentValue('silent');\r\n        meta.valid = result.valid;\r\n        return result;\r\n    }\r\n    function validate$1(opts) {\r\n        if (!(opts === null || opts === void 0 ? void 0 : opts.mode) || (opts === null || opts === void 0 ? void 0 : opts.mode) === 'force') {\r\n            return validateWithStateMutation();\r\n        }\r\n        if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'validated-only') {\r\n            return validateWithStateMutation();\r\n        }\r\n        return validateValidStateOnly();\r\n    }\r\n    // Common input/change event handler\r\n    const handleChange = (e, shouldValidate = true) => {\r\n        const newValue = normalizeEventValue(e);\r\n        value.value = newValue;\r\n        if (!validateOnValueUpdate && shouldValidate) {\r\n            validateWithStateMutation();\r\n        }\r\n    };\r\n    // Runs the initial validation\r\n    onMounted(() => {\r\n        if (validateOnMount) {\r\n            return validateWithStateMutation();\r\n        }\r\n        // validate self initially if no form was handling this\r\n        // forms should have their own initial silent validation run to make things more efficient\r\n        if (!form || !form.validateSchema) {\r\n            validateValidStateOnly();\r\n        }\r\n    });\r\n    function setTouched(isTouched) {\r\n        meta.touched = isTouched;\r\n    }\r\n    let unwatchValue;\r\n    function watchValue() {\r\n        unwatchValue = watch(value, validateOnValueUpdate ? validateWithStateMutation : validateValidStateOnly, {\r\n            deep: true,\r\n        });\r\n    }\r\n    watchValue();\r\n    function resetField(state) {\r\n        var _a;\r\n        unwatchValue === null || unwatchValue === void 0 ? void 0 : unwatchValue();\r\n        const newValue = state && 'value' in state ? state.value : initialValue.value;\r\n        setState({\r\n            value: klona(newValue),\r\n            initialValue: klona(newValue),\r\n            touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\r\n            errors: (state === null || state === void 0 ? void 0 : state.errors) || [],\r\n        });\r\n        meta.pending = false;\r\n        meta.validated = false;\r\n        validateValidStateOnly();\r\n        // need to watch at next tick to avoid triggering the value watcher\r\n        nextTick(() => {\r\n            watchValue();\r\n        });\r\n    }\r\n    function setValue(newValue) {\r\n        value.value = newValue;\r\n    }\r\n    function setErrors(errors) {\r\n        setState({ errors: Array.isArray(errors) ? errors : [errors] });\r\n    }\r\n    const field = {\r\n        id,\r\n        name,\r\n        label,\r\n        value,\r\n        meta,\r\n        errors,\r\n        errorMessage,\r\n        type,\r\n        checkedValue,\r\n        uncheckedValue,\r\n        bails,\r\n        resetField,\r\n        handleReset: () => resetField(),\r\n        validate: validate$1,\r\n        handleChange,\r\n        handleBlur,\r\n        setState,\r\n        setTouched,\r\n        setErrors,\r\n        setValue,\r\n    };\r\n    provide(FieldContextKey, field);\r\n    if (isRef(rules) && typeof unref(rules) !== 'function') {\r\n        watch(rules, (value, oldValue) => {\r\n            if (es6(value, oldValue)) {\r\n                return;\r\n            }\r\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\r\n        }, {\r\n            deep: true,\r\n        });\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        field._vm = getCurrentInstance();\r\n        watch(() => (Object.assign(Object.assign({ errors: errors.value }, meta), { value: value.value })), refreshInspector, {\r\n            deep: true,\r\n        });\r\n        if (!form) {\r\n            registerSingleFieldWithDevtools(field);\r\n        }\r\n    }\r\n    // if no associated form return the field API immediately\r\n    if (!form) {\r\n        return field;\r\n    }\r\n    // associate the field with the given form\r\n    form.register(field);\r\n    onBeforeUnmount(() => {\r\n        form.unregister(field);\r\n    });\r\n    // extract cross-field dependencies in a computed prop\r\n    const dependencies = computed(() => {\r\n        const rulesVal = normalizedRules.value;\r\n        // is falsy, a function schema or a yup schema\r\n        if (!rulesVal || isCallable(rulesVal) || isYupValidator(rulesVal)) {\r\n            return {};\r\n        }\r\n        return Object.keys(rulesVal).reduce((acc, rule) => {\r\n            const deps = extractLocators(rulesVal[rule])\r\n                .map((dep) => dep.__locatorRef)\r\n                .reduce((depAcc, depName) => {\r\n                const depValue = getFromPath(form.values, depName) || form.values[depName];\r\n                if (depValue !== undefined) {\r\n                    depAcc[depName] = depValue;\r\n                }\r\n                return depAcc;\r\n            }, {});\r\n            Object.assign(acc, deps);\r\n            return acc;\r\n        }, {});\r\n    });\r\n    // Adds a watcher that runs the validation whenever field dependencies change\r\n    watch(dependencies, (deps, oldDeps) => {\r\n        // Skip if no dependencies or if the field wasn't manipulated\r\n        if (!Object.keys(deps).length) {\r\n            return;\r\n        }\r\n        const shouldValidate = !es6(deps, oldDeps);\r\n        if (shouldValidate) {\r\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\r\n        }\r\n    });\r\n    return field;\r\n}\r\n/**\r\n * Normalizes partial field options to include the full options\r\n */\r\nfunction normalizeOptions(name, opts) {\r\n    const defaults = () => ({\r\n        initialValue: undefined,\r\n        validateOnMount: false,\r\n        bails: true,\r\n        rules: '',\r\n        label: name,\r\n        validateOnValueUpdate: true,\r\n        standalone: false,\r\n    });\r\n    if (!opts) {\r\n        return defaults();\r\n    }\r\n    // TODO: Deprecate this in next major release\r\n    const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\r\n    return Object.assign(Object.assign(Object.assign({}, defaults()), (opts || {})), { checkedValue });\r\n}\r\n/**\r\n * Extracts the validation rules from a schema\r\n */\r\nfunction extractRuleFromSchema(schema, fieldName) {\r\n    // no schema at all\r\n    if (!schema) {\r\n        return undefined;\r\n    }\r\n    // there is a key on the schema object for this field\r\n    return schema[fieldName];\r\n}\r\nfunction useCheckboxField(name, rules, opts) {\r\n    const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\r\n    const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\r\n    const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\r\n    function patchCheckboxApi(field) {\r\n        const handleChange = field.handleChange;\r\n        const checked = computed(() => {\r\n            const currentValue = unref(field.value);\r\n            const checkedVal = unref(checkedValue);\r\n            return Array.isArray(currentValue) ? currentValue.includes(checkedVal) : checkedVal === currentValue;\r\n        });\r\n        function handleCheckboxChange(e, shouldValidate = true) {\r\n            var _a, _b;\r\n            if (checked.value === ((_b = (_a = e) === null || _a === void 0 ? void 0 : _a.target) === null || _b === void 0 ? void 0 : _b.checked)) {\r\n                return;\r\n            }\r\n            let newValue = normalizeEventValue(e);\r\n            // Single checkbox field without a form to toggle it's value\r\n            if (!form) {\r\n                newValue = resolveNextCheckboxValue(unref(field.value), unref(checkedValue), unref(uncheckedValue));\r\n            }\r\n            handleChange(newValue, shouldValidate);\r\n        }\r\n        onBeforeUnmount(() => {\r\n            // toggles the checkbox value if it was checked\r\n            if (checked.value) {\r\n                handleCheckboxChange(unref(checkedValue), false);\r\n            }\r\n        });\r\n        return Object.assign(Object.assign({}, field), { checked,\r\n            checkedValue,\r\n            uncheckedValue, handleChange: handleCheckboxChange });\r\n    }\r\n    return patchCheckboxApi(_useField(name, rules, opts));\r\n}\n\nconst FieldImpl = defineComponent({\r\n    name: 'Field',\r\n    inheritAttrs: false,\r\n    props: {\r\n        as: {\r\n            type: [String, Object],\r\n            default: undefined,\r\n        },\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        rules: {\r\n            type: [Object, String, Function],\r\n            default: undefined,\r\n        },\r\n        validateOnMount: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        validateOnBlur: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnChange: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnInput: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnModelUpdate: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        bails: {\r\n            type: Boolean,\r\n            default: () => getConfig().bails,\r\n        },\r\n        label: {\r\n            type: String,\r\n            default: undefined,\r\n        },\r\n        uncheckedValue: {\r\n            type: null,\r\n            default: undefined,\r\n        },\r\n        modelValue: {\r\n            type: null,\r\n            default: IS_ABSENT,\r\n        },\r\n        modelModifiers: {\r\n            type: null,\r\n            default: () => ({}),\r\n        },\r\n        'onUpdate:modelValue': {\r\n            type: null,\r\n            default: undefined,\r\n        },\r\n        standalone: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const rules = toRef(props, 'rules');\r\n        const name = toRef(props, 'name');\r\n        const label = toRef(props, 'label');\r\n        const uncheckedValue = toRef(props, 'uncheckedValue');\r\n        const hasModelEvents = isPropPresent(props, 'onUpdate:modelValue');\r\n        const { errors, value, errorMessage, validate: validateField, handleChange, handleBlur, setTouched, resetField, handleReset, meta, checked, setErrors, } = useField(name, rules, {\r\n            validateOnMount: props.validateOnMount,\r\n            bails: props.bails,\r\n            standalone: props.standalone,\r\n            type: ctx.attrs.type,\r\n            initialValue: resolveInitialValue(props, ctx),\r\n            // Only for checkboxes and radio buttons\r\n            checkedValue: ctx.attrs.value,\r\n            uncheckedValue,\r\n            label,\r\n            validateOnValueUpdate: false,\r\n        });\r\n        // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\r\n        const onChangeHandler = hasModelEvents\r\n            ? function handleChangeWithModel(e, shouldValidate = true) {\r\n                handleChange(e, shouldValidate);\r\n                ctx.emit('update:modelValue', value.value);\r\n            }\r\n            : handleChange;\r\n        const handleInput = (e) => {\r\n            if (!hasCheckedAttr(ctx.attrs.type)) {\r\n                value.value = normalizeEventValue(e);\r\n            }\r\n        };\r\n        const onInputHandler = hasModelEvents\r\n            ? function handleInputWithModel(e) {\r\n                handleInput(e);\r\n                ctx.emit('update:modelValue', value.value);\r\n            }\r\n            : handleInput;\r\n        const fieldProps = computed(() => {\r\n            const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = resolveValidationTriggers(props);\r\n            const baseOnBlur = [handleBlur, ctx.attrs.onBlur, validateOnBlur ? validateField : undefined].filter(Boolean);\r\n            const baseOnInput = [(e) => onChangeHandler(e, validateOnInput), ctx.attrs.onInput].filter(Boolean);\r\n            const baseOnChange = [(e) => onChangeHandler(e, validateOnChange), ctx.attrs.onChange].filter(Boolean);\r\n            const attrs = {\r\n                name: props.name,\r\n                onBlur: baseOnBlur,\r\n                onInput: baseOnInput,\r\n                onChange: baseOnChange,\r\n            };\r\n            if (validateOnModelUpdate) {\r\n                attrs['onUpdate:modelValue'] = [onChangeHandler];\r\n            }\r\n            if (hasCheckedAttr(ctx.attrs.type) && checked) {\r\n                attrs.checked = checked.value;\r\n            }\r\n            else {\r\n                attrs.value = value.value;\r\n            }\r\n            const tag = resolveTag(props, ctx);\r\n            if (shouldHaveValueBinding(tag, ctx.attrs)) {\r\n                delete attrs.value;\r\n            }\r\n            return attrs;\r\n        });\r\n        const modelValue = toRef(props, 'modelValue');\r\n        watch(modelValue, newModelValue => {\r\n            // Don't attempt to sync absent values\r\n            if (newModelValue === IS_ABSENT && value.value === undefined) {\r\n                return;\r\n            }\r\n            if (newModelValue !== applyModifiers(value.value, props.modelModifiers)) {\r\n                value.value = newModelValue === IS_ABSENT ? undefined : newModelValue;\r\n                validateField();\r\n            }\r\n        });\r\n        function slotProps() {\r\n            return {\r\n                field: fieldProps.value,\r\n                value: value.value,\r\n                meta,\r\n                errors: errors.value,\r\n                errorMessage: errorMessage.value,\r\n                validate: validateField,\r\n                resetField,\r\n                handleChange: onChangeHandler,\r\n                handleInput: onInputHandler,\r\n                handleReset,\r\n                handleBlur,\r\n                setTouched,\r\n                setErrors,\r\n            };\r\n        }\r\n        ctx.expose({\r\n            setErrors,\r\n            setTouched,\r\n            reset: resetField,\r\n            validate: validateField,\r\n            handleChange,\r\n        });\r\n        return () => {\r\n            const tag = resolveDynamicComponent(resolveTag(props, ctx));\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            if (tag) {\r\n                return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\r\n            }\r\n            return children;\r\n        };\r\n    },\r\n});\r\nfunction resolveTag(props, ctx) {\r\n    let tag = props.as || '';\r\n    if (!props.as && !ctx.slots.default) {\r\n        tag = 'input';\r\n    }\r\n    return tag;\r\n}\r\nfunction resolveValidationTriggers(props) {\r\n    var _a, _b, _c, _d;\r\n    const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = getConfig();\r\n    return {\r\n        validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\r\n        validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\r\n        validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\r\n        validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate,\r\n    };\r\n}\r\nfunction applyModifiers(value, modifiers) {\r\n    if (modifiers.number) {\r\n        return toNumber(value);\r\n    }\r\n    return value;\r\n}\r\nfunction resolveInitialValue(props, ctx) {\r\n    // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\r\n    // For checkboxes and radio buttons it will always be the model value not the `value` attribute\r\n    if (!hasCheckedAttr(ctx.attrs.type)) {\r\n        return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\r\n    }\r\n    return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\r\n}\r\nconst Field = FieldImpl;\n\nlet FORM_COUNTER = 0;\r\nfunction useForm(opts) {\r\n    const formId = FORM_COUNTER++;\r\n    // A lookup containing fields or field groups\r\n    const fieldsByPath = ref({});\r\n    // If the form is currently submitting\r\n    const isSubmitting = ref(false);\r\n    // The number of times the user tried to submit the form\r\n    const submitCount = ref(0);\r\n    // dictionary for field arrays to receive various signals like reset\r\n    const fieldArraysLookup = {};\r\n    // a private ref for all form values\r\n    const formValues = reactive(klona(unref(opts === null || opts === void 0 ? void 0 : opts.initialValues) || {}));\r\n    // the source of errors for the form fields\r\n    const { errorBag, setErrorBag, setFieldErrorBag } = useErrorBag(opts === null || opts === void 0 ? void 0 : opts.initialErrors);\r\n    // Gets the first error of each field\r\n    const errors = computed(() => {\r\n        return keysOf(errorBag.value).reduce((acc, key) => {\r\n            const bag = errorBag.value[key];\r\n            if (bag && bag.length) {\r\n                acc[key] = bag[0];\r\n            }\r\n            return acc;\r\n        }, {});\r\n    });\r\n    function getFirstFieldAtPath(path) {\r\n        const fieldOrGroup = fieldsByPath.value[path];\r\n        return Array.isArray(fieldOrGroup) ? fieldOrGroup[0] : fieldOrGroup;\r\n    }\r\n    function fieldExists(path) {\r\n        return !!fieldsByPath.value[path];\r\n    }\r\n    /**\r\n     * Holds a computed reference to all fields names and labels\r\n     */\r\n    const fieldNames = computed(() => {\r\n        return keysOf(fieldsByPath.value).reduce((names, path) => {\r\n            const field = getFirstFieldAtPath(path);\r\n            if (field) {\r\n                names[path] = unref(field.label || field.name) || '';\r\n            }\r\n            return names;\r\n        }, {});\r\n    });\r\n    const fieldBailsMap = computed(() => {\r\n        return keysOf(fieldsByPath.value).reduce((map, path) => {\r\n            var _a;\r\n            const field = getFirstFieldAtPath(path);\r\n            if (field) {\r\n                map[path] = (_a = field.bails) !== null && _a !== void 0 ? _a : true;\r\n            }\r\n            return map;\r\n        }, {});\r\n    });\r\n    // mutable non-reactive reference to initial errors\r\n    // we need this to process initial errors then unset them\r\n    const initialErrors = Object.assign({}, ((opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {}));\r\n    // initial form values\r\n    const { initialValues, originalInitialValues, setInitialValues } = useFormInitialValues(fieldsByPath, formValues, opts === null || opts === void 0 ? void 0 : opts.initialValues);\r\n    // form meta aggregations\r\n    const meta = useFormMeta(fieldsByPath, formValues, initialValues, errors);\r\n    const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\r\n    const formCtx = {\r\n        formId,\r\n        fieldsByPath,\r\n        values: formValues,\r\n        errorBag,\r\n        errors,\r\n        schema,\r\n        submitCount,\r\n        meta,\r\n        isSubmitting,\r\n        fieldArraysLookup,\r\n        validateSchema: unref(schema) ? validateSchema : undefined,\r\n        validate,\r\n        register: registerField,\r\n        unregister: unregisterField,\r\n        setFieldErrorBag,\r\n        validateField,\r\n        setFieldValue,\r\n        setValues,\r\n        setErrors,\r\n        setFieldError,\r\n        setFieldTouched,\r\n        setTouched,\r\n        resetForm,\r\n        handleSubmit,\r\n        stageInitialValue,\r\n        unsetInitialValue,\r\n        setFieldInitialValue,\r\n    };\r\n    function isFieldGroup(fieldOrGroup) {\r\n        return Array.isArray(fieldOrGroup);\r\n    }\r\n    function applyFieldMutation(fieldOrGroup, mutation) {\r\n        if (Array.isArray(fieldOrGroup)) {\r\n            return fieldOrGroup.forEach(mutation);\r\n        }\r\n        return mutation(fieldOrGroup);\r\n    }\r\n    /**\r\n     * Manually sets an error message on a specific field\r\n     */\r\n    function setFieldError(field, message) {\r\n        setFieldErrorBag(field, message);\r\n    }\r\n    /**\r\n     * Sets errors for the fields specified in the object\r\n     */\r\n    function setErrors(fields) {\r\n        setErrorBag(fields);\r\n    }\r\n    /**\r\n     * Sets a single field value\r\n     */\r\n    function setFieldValue(field, value, { force } = { force: false }) {\r\n        var _a;\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        const clonedValue = klona(value);\r\n        // field wasn't found, create a virtual field as a placeholder\r\n        if (!fieldInstance) {\r\n            setInPath(formValues, field, clonedValue);\r\n            return;\r\n        }\r\n        // Multiple checkboxes, and only one of them got updated\r\n        if (isFieldGroup(fieldInstance) && ((_a = fieldInstance[0]) === null || _a === void 0 ? void 0 : _a.type) === 'checkbox' && !Array.isArray(value)) {\r\n            const newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field) || [], value, undefined));\r\n            setInPath(formValues, field, newValue);\r\n            return;\r\n        }\r\n        let newValue = value;\r\n        // Single Checkbox: toggles the field value unless the field is being reset then force it\r\n        if (!isFieldGroup(fieldInstance) && fieldInstance.type === 'checkbox' && !force) {\r\n            newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field), value, unref(fieldInstance.uncheckedValue)));\r\n        }\r\n        setInPath(formValues, field, newValue);\r\n    }\r\n    /**\r\n     * Sets multiple fields values\r\n     */\r\n    function setValues(fields) {\r\n        // clean up old values\r\n        keysOf(formValues).forEach(key => {\r\n            delete formValues[key];\r\n        });\r\n        // set up new values\r\n        keysOf(fields).forEach(path => {\r\n            setFieldValue(path, fields[path]);\r\n        });\r\n        // regenerate the arrays when the form values change\r\n        Object.values(fieldArraysLookup).forEach(f => f && f.reset());\r\n    }\r\n    /**\r\n     * Sets the touched meta state on a field\r\n     */\r\n    function setFieldTouched(field, isTouched) {\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        if (fieldInstance) {\r\n            applyFieldMutation(fieldInstance, f => f.setTouched(isTouched));\r\n        }\r\n    }\r\n    /**\r\n     * Sets the touched meta state on multiple fields\r\n     */\r\n    function setTouched(fields) {\r\n        keysOf(fields).forEach(field => {\r\n            setFieldTouched(field, !!fields[field]);\r\n        });\r\n    }\r\n    /**\r\n     * Resets all fields\r\n     */\r\n    function resetForm(state) {\r\n        // set initial values if provided\r\n        if (state === null || state === void 0 ? void 0 : state.values) {\r\n            setInitialValues(state.values);\r\n            setValues(state === null || state === void 0 ? void 0 : state.values);\r\n        }\r\n        else {\r\n            // clean up the initial values back to the original\r\n            setInitialValues(originalInitialValues.value);\r\n            // otherwise clean the current values\r\n            setValues(originalInitialValues.value);\r\n        }\r\n        Object.values(fieldsByPath.value).forEach(field => {\r\n            if (!field) {\r\n                return;\r\n            }\r\n            applyFieldMutation(field, f => f.resetField());\r\n        });\r\n        if (state === null || state === void 0 ? void 0 : state.touched) {\r\n            setTouched(state.touched);\r\n        }\r\n        setErrors((state === null || state === void 0 ? void 0 : state.errors) || {});\r\n        submitCount.value = (state === null || state === void 0 ? void 0 : state.submitCount) || 0;\r\n    }\r\n    function insertFieldAtPath(field, path) {\r\n        const rawField = markRaw(field);\r\n        const fieldPath = path;\r\n        // first field at that path\r\n        if (!fieldsByPath.value[fieldPath]) {\r\n            fieldsByPath.value[fieldPath] = rawField;\r\n            return;\r\n        }\r\n        const fieldAtPath = fieldsByPath.value[fieldPath];\r\n        if (fieldAtPath && !Array.isArray(fieldAtPath)) {\r\n            fieldsByPath.value[fieldPath] = [fieldAtPath];\r\n        }\r\n        // add the new array to that path\r\n        fieldsByPath.value[fieldPath] = [...fieldsByPath.value[fieldPath], rawField];\r\n    }\r\n    function removeFieldFromPath(field, path) {\r\n        const fieldPath = path;\r\n        const fieldAtPath = fieldsByPath.value[fieldPath];\r\n        if (!fieldAtPath) {\r\n            return;\r\n        }\r\n        // same field at path\r\n        if (!isFieldGroup(fieldAtPath) && field.id === fieldAtPath.id) {\r\n            delete fieldsByPath.value[fieldPath];\r\n            return;\r\n        }\r\n        if (isFieldGroup(fieldAtPath)) {\r\n            const idx = fieldAtPath.findIndex(f => f.id === field.id);\r\n            if (idx === -1) {\r\n                return;\r\n            }\r\n            fieldAtPath.splice(idx, 1);\r\n            if (fieldAtPath.length === 1) {\r\n                fieldsByPath.value[fieldPath] = fieldAtPath[0];\r\n                return;\r\n            }\r\n            if (!fieldAtPath.length) {\r\n                delete fieldsByPath.value[fieldPath];\r\n            }\r\n        }\r\n    }\r\n    function registerField(field) {\r\n        const fieldPath = unref(field.name);\r\n        insertFieldAtPath(field, fieldPath);\r\n        if (isRef(field.name)) {\r\n            // ensures when a field's name was already taken that it preserves its same value\r\n            // necessary for fields generated by loops\r\n            watch(field.name, async (newPath, oldPath) => {\r\n                // cache the value\r\n                await nextTick();\r\n                removeFieldFromPath(field, oldPath);\r\n                insertFieldAtPath(field, newPath);\r\n                // re-validate if either path had errors before\r\n                if (errors.value[oldPath] || errors.value[newPath]) {\r\n                    validateField(newPath);\r\n                }\r\n                // clean up the old path if no other field is sharing that name\r\n                // #3325\r\n                await nextTick();\r\n                if (!fieldExists(oldPath)) {\r\n                    unsetPath(formValues, oldPath);\r\n                }\r\n            });\r\n        }\r\n        // if field already had errors (initial errors) that's not user-set, validate it again to ensure state is correct\r\n        // the difference being that `initialErrors` will contain the error message while other errors (pre-validated schema) won't have them as initial errors\r\n        // #3342\r\n        const initialErrorMessage = unref(field.errorMessage);\r\n        if (initialErrorMessage && (initialErrors === null || initialErrors === void 0 ? void 0 : initialErrors[fieldPath]) !== initialErrorMessage) {\r\n            validateField(fieldPath);\r\n        }\r\n        // marks the initial error as \"consumed\" so it won't be matched later with same non-initial error\r\n        delete initialErrors[fieldPath];\r\n    }\r\n    function unregisterField(field) {\r\n        const fieldName = unref(field.name);\r\n        removeFieldFromPath(field, fieldName);\r\n        nextTick(() => {\r\n            // clears a field error on unmounted\r\n            // we wait till next tick to make sure if the field is completely removed and doesn't have any siblings like checkboxes\r\n            // #3384\r\n            if (!fieldExists(fieldName)) {\r\n                setFieldError(fieldName, undefined);\r\n                unsetPath(formValues, fieldName);\r\n            }\r\n        });\r\n    }\r\n    async function validate(opts) {\r\n        if (formCtx.validateSchema) {\r\n            return formCtx.validateSchema((opts === null || opts === void 0 ? void 0 : opts.mode) || 'force');\r\n        }\r\n        // No schema, each field is responsible to validate itself\r\n        const validations = await Promise.all(Object.values(fieldsByPath.value).map(field => {\r\n            const fieldInstance = Array.isArray(field) ? field[0] : field;\r\n            if (!fieldInstance) {\r\n                return Promise.resolve({ key: '', valid: true, errors: [] });\r\n            }\r\n            return fieldInstance.validate(opts).then((result) => {\r\n                return {\r\n                    key: unref(fieldInstance.name),\r\n                    valid: result.valid,\r\n                    errors: result.errors,\r\n                };\r\n            });\r\n        }));\r\n        const results = {};\r\n        const errors = {};\r\n        for (const validation of validations) {\r\n            results[validation.key] = {\r\n                valid: validation.valid,\r\n                errors: validation.errors,\r\n            };\r\n            if (validation.errors.length) {\r\n                errors[validation.key] = validation.errors[0];\r\n            }\r\n        }\r\n        return {\r\n            valid: validations.every(r => r.valid),\r\n            results,\r\n            errors,\r\n        };\r\n    }\r\n    async function validateField(field) {\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        if (!fieldInstance) {\r\n            warn$1(`field with name ${field} was not found`);\r\n            return Promise.resolve({ errors: [], valid: true });\r\n        }\r\n        if (Array.isArray(fieldInstance)) {\r\n            return fieldInstance.map(f => f.validate())[0];\r\n        }\r\n        return fieldInstance.validate();\r\n    }\r\n    function handleSubmit(fn, onValidationError) {\r\n        return function submissionHandler(e) {\r\n            if (e instanceof Event) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n            }\r\n            // Touch all fields\r\n            setTouched(keysOf(fieldsByPath.value).reduce((acc, field) => {\r\n                acc[field] = true;\r\n                return acc;\r\n            }, {}));\r\n            isSubmitting.value = true;\r\n            submitCount.value++;\r\n            return validate()\r\n                .then(result => {\r\n                if (result.valid && typeof fn === 'function') {\r\n                    return fn(klona(formValues), {\r\n                        evt: e,\r\n                        setErrors,\r\n                        setFieldError,\r\n                        setTouched,\r\n                        setFieldTouched,\r\n                        setValues,\r\n                        setFieldValue,\r\n                        resetForm,\r\n                    });\r\n                }\r\n                if (!result.valid && typeof onValidationError === 'function') {\r\n                    onValidationError({\r\n                        values: klona(formValues),\r\n                        evt: e,\r\n                        errors: result.errors,\r\n                        results: result.results,\r\n                    });\r\n                }\r\n            })\r\n                .then(returnVal => {\r\n                isSubmitting.value = false;\r\n                return returnVal;\r\n            }, err => {\r\n                isSubmitting.value = false;\r\n                // re-throw the err so it doesn't go silent\r\n                throw err;\r\n            });\r\n        };\r\n    }\r\n    function setFieldInitialValue(path, value) {\r\n        setInPath(initialValues.value, path, klona(value));\r\n    }\r\n    function unsetInitialValue(path) {\r\n        unsetPath(initialValues.value, path);\r\n    }\r\n    /**\r\n     * Sneaky function to set initial field values\r\n     */\r\n    function stageInitialValue(path, value) {\r\n        setInPath(formValues, path, value);\r\n        setFieldInitialValue(path, value);\r\n    }\r\n    async function _validateSchema() {\r\n        const schemaValue = unref(schema);\r\n        if (!schemaValue) {\r\n            return { valid: true, results: {}, errors: {} };\r\n        }\r\n        const formResult = isYupValidator(schemaValue)\r\n            ? await validateYupSchema(schemaValue, formValues)\r\n            : await validateObjectSchema(schemaValue, formValues, {\r\n                names: fieldNames.value,\r\n                bailsMap: fieldBailsMap.value,\r\n            });\r\n        return formResult;\r\n    }\r\n    /**\r\n     * Batches validation runs in 5ms batches\r\n     */\r\n    const debouncedSchemaValidation = debounceAsync(_validateSchema, 5);\r\n    async function validateSchema(mode) {\r\n        const formResult = await debouncedSchemaValidation();\r\n        // fields by id lookup\r\n        const fieldsById = formCtx.fieldsByPath.value || {};\r\n        // errors fields names, we need it to also check if custom errors are updated\r\n        const currentErrorsPaths = keysOf(formCtx.errorBag.value);\r\n        // collect all the keys from the schema and all fields\r\n        // this ensures we have a complete keymap of all the fields\r\n        const paths = [\r\n            ...new Set([...keysOf(formResult.results), ...keysOf(fieldsById), ...currentErrorsPaths]),\r\n        ];\r\n        // aggregates the paths into a single result object while applying the results on the fields\r\n        return paths.reduce((validation, path) => {\r\n            const field = fieldsById[path];\r\n            const messages = (formResult.results[path] || { errors: [] }).errors;\r\n            const fieldResult = {\r\n                errors: messages,\r\n                valid: !messages.length,\r\n            };\r\n            validation.results[path] = fieldResult;\r\n            if (!fieldResult.valid) {\r\n                validation.errors[path] = fieldResult.errors[0];\r\n            }\r\n            // field not rendered\r\n            if (!field) {\r\n                setFieldError(path, messages);\r\n                return validation;\r\n            }\r\n            // always update the valid flag regardless of the mode\r\n            applyFieldMutation(field, f => (f.meta.valid = fieldResult.valid));\r\n            if (mode === 'silent') {\r\n                return validation;\r\n            }\r\n            const wasValidated = Array.isArray(field) ? field.some(f => f.meta.validated) : field.meta.validated;\r\n            if (mode === 'validated-only' && !wasValidated) {\r\n                return validation;\r\n            }\r\n            applyFieldMutation(field, f => f.setState({ errors: fieldResult.errors }));\r\n            return validation;\r\n        }, { valid: formResult.valid, results: {}, errors: {} });\r\n    }\r\n    const submitForm = handleSubmit((_, { evt }) => {\r\n        if (isFormSubmitEvent(evt)) {\r\n            evt.target.submit();\r\n        }\r\n    });\r\n    // Trigger initial validation\r\n    onMounted(() => {\r\n        if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\r\n            setErrors(opts.initialErrors);\r\n        }\r\n        if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\r\n            setTouched(opts.initialTouched);\r\n        }\r\n        // if validate on mount was enabled\r\n        if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\r\n            validate();\r\n            return;\r\n        }\r\n        // otherwise run initial silent validation through schema if available\r\n        // the useField should skip their own silent validation if a yup schema is present\r\n        if (formCtx.validateSchema) {\r\n            formCtx.validateSchema('silent');\r\n        }\r\n    });\r\n    if (isRef(schema)) {\r\n        watch(schema, () => {\r\n            var _a;\r\n            (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\r\n        });\r\n    }\r\n    // Provide injections\r\n    provide(FormContextKey, formCtx);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        registerFormWithDevTools(formCtx);\r\n        watch(() => (Object.assign(Object.assign({ errors: errorBag.value }, meta.value), { values: formValues, isSubmitting: isSubmitting.value, submitCount: submitCount.value })), refreshInspector, {\r\n            deep: true,\r\n        });\r\n    }\r\n    return {\r\n        errors,\r\n        meta,\r\n        values: formValues,\r\n        isSubmitting,\r\n        submitCount,\r\n        validate,\r\n        validateField,\r\n        handleReset: () => resetForm(),\r\n        resetForm,\r\n        handleSubmit,\r\n        submitForm,\r\n        setFieldError,\r\n        setErrors,\r\n        setFieldValue,\r\n        setValues,\r\n        setFieldTouched,\r\n        setTouched,\r\n    };\r\n}\r\n/**\r\n * Manages form meta aggregation\r\n */\r\nfunction useFormMeta(fieldsByPath, currentValues, initialValues, errors) {\r\n    const MERGE_STRATEGIES = {\r\n        touched: 'some',\r\n        pending: 'some',\r\n        valid: 'every',\r\n    };\r\n    const isDirty = computed(() => {\r\n        return !es6(currentValues, unref(initialValues));\r\n    });\r\n    const flags = computed(() => {\r\n        const fields = Object.values(fieldsByPath.value).flat(1).filter(Boolean);\r\n        return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\r\n            const mergeMethod = MERGE_STRATEGIES[flag];\r\n            acc[flag] = fields[mergeMethod](field => field.meta[flag]);\r\n            return acc;\r\n        }, {});\r\n    });\r\n    return computed(() => {\r\n        return Object.assign(Object.assign({ initialValues: unref(initialValues) }, flags.value), { valid: flags.value.valid && !keysOf(errors.value).length, dirty: isDirty.value });\r\n    });\r\n}\r\n/**\r\n * Manages the initial values prop\r\n */\r\nfunction useFormInitialValues(fields, formValues, providedValues) {\r\n    // these are the mutable initial values as the fields are mounted/unmounted\r\n    const initialValues = ref(klona(unref(providedValues)) || {});\r\n    // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\r\n    // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\r\n    // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\r\n    // so these are the values that the reset function should use\r\n    // these only change when the user explicitly chanegs the initial values or when the user resets them with new values.\r\n    const originalInitialValues = ref(klona(unref(providedValues)) || {});\r\n    function setInitialValues(values, updateFields = false) {\r\n        initialValues.value = klona(values);\r\n        originalInitialValues.value = klona(values);\r\n        if (!updateFields) {\r\n            return;\r\n        }\r\n        // update the pristine non-touched fields\r\n        // those are excluded because it's unlikely you want to change the form values using initial values\r\n        // we mostly watch them for API population or newly inserted fields\r\n        // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\r\n        keysOf(fields.value).forEach(fieldPath => {\r\n            const field = fields.value[fieldPath];\r\n            const wasTouched = Array.isArray(field) ? field.some(f => f.meta.touched) : field === null || field === void 0 ? void 0 : field.meta.touched;\r\n            if (!field || wasTouched) {\r\n                return;\r\n            }\r\n            const newValue = getFromPath(initialValues.value, fieldPath);\r\n            setInPath(formValues, fieldPath, klona(newValue));\r\n        });\r\n    }\r\n    if (isRef(providedValues)) {\r\n        watch(providedValues, value => {\r\n            setInitialValues(value, true);\r\n        }, {\r\n            deep: true,\r\n        });\r\n    }\r\n    return {\r\n        initialValues,\r\n        originalInitialValues,\r\n        setInitialValues,\r\n    };\r\n}\r\nfunction useErrorBag(initialErrors) {\r\n    const errorBag = ref({});\r\n    function normalizeErrorItem(message) {\r\n        return Array.isArray(message) ? message : message ? [message] : [];\r\n    }\r\n    /**\r\n     * Manually sets an error message on a specific field\r\n     */\r\n    function setFieldErrorBag(field, message) {\r\n        if (!message) {\r\n            delete errorBag.value[field];\r\n            return;\r\n        }\r\n        errorBag.value[field] = normalizeErrorItem(message);\r\n    }\r\n    /**\r\n     * Sets errors for the fields specified in the object\r\n     */\r\n    function setErrorBag(fields) {\r\n        errorBag.value = keysOf(fields).reduce((acc, key) => {\r\n            const message = fields[key];\r\n            if (message) {\r\n                acc[key] = normalizeErrorItem(message);\r\n            }\r\n            return acc;\r\n        }, {});\r\n    }\r\n    if (initialErrors) {\r\n        setErrorBag(initialErrors);\r\n    }\r\n    return {\r\n        errorBag,\r\n        setErrorBag,\r\n        setFieldErrorBag,\r\n    };\r\n}\n\nconst FormImpl = defineComponent({\r\n    name: 'Form',\r\n    inheritAttrs: false,\r\n    props: {\r\n        as: {\r\n            type: String,\r\n            default: 'form',\r\n        },\r\n        validationSchema: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialValues: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialErrors: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialTouched: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        validateOnMount: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        onSubmit: {\r\n            type: Function,\r\n            default: undefined,\r\n        },\r\n        onInvalidSubmit: {\r\n            type: Function,\r\n            default: undefined,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const initialValues = toRef(props, 'initialValues');\r\n        const validationSchema = toRef(props, 'validationSchema');\r\n        const { errors, values, meta, isSubmitting, submitCount, validate, validateField, handleReset, resetForm, handleSubmit, submitForm, setErrors, setFieldError, setFieldValue, setValues, setFieldTouched, setTouched, } = useForm({\r\n            validationSchema: validationSchema.value ? validationSchema : undefined,\r\n            initialValues,\r\n            initialErrors: props.initialErrors,\r\n            initialTouched: props.initialTouched,\r\n            validateOnMount: props.validateOnMount,\r\n        });\r\n        const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\r\n        function handleFormReset(e) {\r\n            if (isEvent(e)) {\r\n                // Prevent default form reset behavior\r\n                e.preventDefault();\r\n            }\r\n            handleReset();\r\n            if (typeof ctx.attrs.onReset === 'function') {\r\n                ctx.attrs.onReset();\r\n            }\r\n        }\r\n        function handleScopedSlotSubmit(evt, onSubmit) {\r\n            const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\r\n            return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\r\n        }\r\n        function slotProps() {\r\n            return {\r\n                meta: meta.value,\r\n                errors: errors.value,\r\n                values: values,\r\n                isSubmitting: isSubmitting.value,\r\n                submitCount: submitCount.value,\r\n                validate,\r\n                validateField,\r\n                handleSubmit: handleScopedSlotSubmit,\r\n                handleReset,\r\n                submitForm,\r\n                setErrors,\r\n                setFieldError,\r\n                setFieldValue,\r\n                setValues,\r\n                setFieldTouched,\r\n                setTouched,\r\n                resetForm,\r\n            };\r\n        }\r\n        // expose these functions and methods as part of public API\r\n        ctx.expose({\r\n            setFieldError,\r\n            setErrors,\r\n            setFieldValue,\r\n            setValues,\r\n            setFieldTouched,\r\n            setTouched,\r\n            resetForm,\r\n            validate,\r\n            validateField,\r\n        });\r\n        return function renderForm() {\r\n            // avoid resolving the form component as itself\r\n            const tag = props.as === 'form' ? props.as : resolveDynamicComponent(props.as);\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            if (!props.as) {\r\n                return children;\r\n            }\r\n            // Attributes to add on a native `form` tag\r\n            const formAttrs = props.as === 'form'\r\n                ? {\r\n                    // Disables native validation as vee-validate will handle it.\r\n                    novalidate: true,\r\n                }\r\n                : {};\r\n            return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), { onSubmit, onReset: handleFormReset }), children);\r\n        };\r\n    },\r\n});\r\nconst Form = FormImpl;\n\nlet FIELD_ARRAY_COUNTER = 0;\r\nfunction useFieldArray(arrayPath) {\r\n    const id = FIELD_ARRAY_COUNTER++;\r\n    const form = injectWithSelf(FormContextKey, undefined);\r\n    const fields = ref([]);\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    const noOp = () => { };\r\n    const noOpApi = {\r\n        fields: readonly(fields),\r\n        remove: noOp,\r\n        push: noOp,\r\n        swap: noOp,\r\n        insert: noOp,\r\n        update: noOp,\r\n        replace: noOp,\r\n        prepend: noOp,\r\n    };\r\n    if (!form) {\r\n        warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\r\n        return noOpApi;\r\n    }\r\n    if (!unref(arrayPath)) {\r\n        warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\r\n        return noOpApi;\r\n    }\r\n    let entryCounter = 0;\r\n    function initFields() {\r\n        const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []);\r\n        fields.value = currentValues.map(createEntry);\r\n        updateEntryFlags();\r\n    }\r\n    initFields();\r\n    function updateEntryFlags() {\r\n        const fieldsLength = fields.value.length;\r\n        for (let i = 0; i < fieldsLength; i++) {\r\n            const entry = fields.value[i];\r\n            entry.isFirst = i === 0;\r\n            entry.isLast = i === fieldsLength - 1;\r\n        }\r\n    }\r\n    function createEntry(value) {\r\n        const key = entryCounter++;\r\n        const entry = {\r\n            key,\r\n            value: computed(() => {\r\n                const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []);\r\n                const idx = fields.value.findIndex(e => e.key === key);\r\n                return idx === -1 ? value : currentValues[idx];\r\n            }),\r\n            isFirst: false,\r\n            isLast: false,\r\n        };\r\n        return entry;\r\n    }\r\n    function remove(idx) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!pathValue || !Array.isArray(pathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        newValue.splice(idx, 1);\r\n        form === null || form === void 0 ? void 0 : form.unsetInitialValue(pathName + `[${idx}]`);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.splice(idx, 1);\r\n        updateEntryFlags();\r\n    }\r\n    function push(value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\r\n        if (!Array.isArray(normalizedPathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...normalizedPathValue];\r\n        newValue.push(value);\r\n        form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.push(createEntry(value));\r\n        updateEntryFlags();\r\n    }\r\n    function swap(indexA, indexB) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || !pathValue[indexA] || !pathValue[indexB]) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        const newFields = [...fields.value];\r\n        // the old switcheroo\r\n        const temp = newValue[indexA];\r\n        newValue[indexA] = newValue[indexB];\r\n        newValue[indexB] = temp;\r\n        const tempEntry = newFields[indexA];\r\n        newFields[indexA] = newFields[indexB];\r\n        newFields[indexB] = tempEntry;\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value = newFields;\r\n        updateEntryFlags();\r\n    }\r\n    function insert(idx, value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || pathValue.length < idx) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        const newFields = [...fields.value];\r\n        newValue.splice(idx, 0, value);\r\n        newFields.splice(idx, 0, createEntry(value));\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value = newFields;\r\n        updateEntryFlags();\r\n    }\r\n    function replace(arr) {\r\n        const pathName = unref(arrayPath);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, arr);\r\n        initFields();\r\n    }\r\n    function update(idx, value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\r\n            return;\r\n        }\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(`${pathName}[${idx}]`, value);\r\n    }\r\n    function prepend(value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\r\n        if (!Array.isArray(normalizedPathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [value, ...normalizedPathValue];\r\n        form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.unshift(createEntry(value));\r\n        updateEntryFlags();\r\n    }\r\n    form.fieldArraysLookup[id] = {\r\n        reset: initFields,\r\n    };\r\n    onBeforeUnmount(() => {\r\n        delete form.fieldArraysLookup[id];\r\n    });\r\n    return {\r\n        fields: readonly(fields),\r\n        remove,\r\n        push,\r\n        swap,\r\n        insert,\r\n        update,\r\n        replace,\r\n        prepend,\r\n    };\r\n}\n\nconst FieldArrayImpl = defineComponent({\r\n    name: 'FieldArray',\r\n    inheritAttrs: false,\r\n    props: {\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const { push, remove, swap, insert, replace, update, prepend, fields } = useFieldArray(toRef(props, 'name'));\r\n        function slotProps() {\r\n            return {\r\n                fields: fields.value,\r\n                push,\r\n                remove,\r\n                swap,\r\n                insert,\r\n                update,\r\n                replace,\r\n                prepend,\r\n            };\r\n        }\r\n        ctx.expose({\r\n            push,\r\n            remove,\r\n            swap,\r\n            insert,\r\n            update,\r\n            replace,\r\n            prepend,\r\n        });\r\n        return () => {\r\n            const children = normalizeChildren(undefined, ctx, slotProps);\r\n            return children;\r\n        };\r\n    },\r\n});\r\nconst FieldArray = FieldArrayImpl;\n\nconst ErrorMessageImpl = defineComponent({\r\n    name: 'ErrorMessage',\r\n    props: {\r\n        as: {\r\n            type: String,\r\n            default: undefined,\r\n        },\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const form = inject(FormContextKey, undefined);\r\n        const message = computed(() => {\r\n            return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\r\n        });\r\n        function slotProps() {\r\n            return {\r\n                message: message.value,\r\n            };\r\n        }\r\n        return () => {\r\n            // Renders nothing if there are no messages\r\n            if (!message.value) {\r\n                return undefined;\r\n            }\r\n            const tag = (props.as ? resolveDynamicComponent(props.as) : props.as);\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            const attrs = Object.assign({ role: 'alert' }, ctx.attrs);\r\n            // If no tag was specified and there are children\r\n            // render the slot as is without wrapping it\r\n            if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\r\n                return children;\r\n            }\r\n            // If no children in slot\r\n            // render whatever specified and fallback to a <span> with the message in it's contents\r\n            if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\r\n                return h(tag || 'span', attrs, message.value);\r\n            }\r\n            return h(tag, attrs, children);\r\n        };\r\n    },\r\n});\r\nconst ErrorMessage = ErrorMessageImpl;\n\nfunction useResetForm() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return function resetForm(state) {\r\n        if (!form) {\r\n            return;\r\n        }\r\n        return form.resetForm(state);\r\n    };\r\n}\n\n/**\r\n * If a field is dirty or not\r\n */\r\nfunction useIsFieldDirty(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.dirty;\r\n    });\r\n}\n\n/**\r\n * If a field is touched or not\r\n */\r\nfunction useIsFieldTouched(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.touched;\r\n    });\r\n}\n\n/**\r\n * If a field is validated and is valid\r\n */\r\nfunction useIsFieldValid(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.valid;\r\n    });\r\n}\n\n/**\r\n * If the form is submitting or not\r\n */\r\nfunction useIsSubmitting() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * Validates a single field\r\n */\r\nfunction useValidateField(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return function validateField() {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return Promise.resolve({\r\n                errors: [],\r\n                valid: true,\r\n            });\r\n        }\r\n        return field.validate();\r\n    };\r\n}\n\n/**\r\n * If the form is dirty or not\r\n */\r\nfunction useIsFormDirty() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * If the form is touched or not\r\n */\r\nfunction useIsFormTouched() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * If the form has been validated and is valid\r\n */\r\nfunction useIsFormValid() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * Validate multiple fields\r\n */\r\nfunction useValidateForm() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return function validateField() {\r\n        if (!form) {\r\n            return Promise.resolve({ results: {}, errors: {}, valid: true });\r\n        }\r\n        return form.validate();\r\n    };\r\n}\n\n/**\r\n * The number of form's submission count\r\n */\r\nfunction useSubmitCount() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\r\n    });\r\n}\n\n/**\r\n * Gives access to a field's current value\r\n */\r\nfunction useFieldValue(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    // We don't want to use self injected context as it doesn't make sense\r\n    const field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(path));\r\n        }\r\n        return unref(field === null || field === void 0 ? void 0 : field.value);\r\n    });\r\n}\n\n/**\r\n * Gives access to a form's values\r\n */\r\nfunction useFormValues() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        return (form === null || form === void 0 ? void 0 : form.values) || {};\r\n    });\r\n}\n\n/**\r\n * Gives access to all form errors\r\n */\r\nfunction useFormErrors() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        return ((form === null || form === void 0 ? void 0 : form.errors.value) || {});\r\n    });\r\n}\n\n/**\r\n * Gives access to a single field error\r\n */\r\nfunction useFieldError(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    // We don't want to use self injected context as it doesn't make sense\r\n    const field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            return form === null || form === void 0 ? void 0 : form.errors.value[unref(path)];\r\n        }\r\n        return field === null || field === void 0 ? void 0 : field.errorMessage.value;\r\n    });\r\n}\n\nfunction useSubmitForm(cb) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    const onSubmit = form ? form.handleSubmit(cb) : undefined;\r\n    return function submitForm(e) {\r\n        if (!onSubmit) {\r\n            return;\r\n        }\r\n        return onSubmit(e);\r\n    };\r\n}\n\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, configure, defineRule, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useResetForm, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate };\n","\r\nimport { ref, computed, defineComponent } from 'vue'\r\nimport { useStore } from 'vuex'\r\nimport { key } from '@/store'\r\nimport { useRouter } from 'vue-router'\r\nimport { Form, Field, ErrorMessage, defineRule } from 'vee-validate'\r\nimport SnackBar from '@/components/ui/SnackBar.vue'\r\nimport { AuthMutations } from '@/store/auth/mutations'\r\nimport { AuthActions } from '@/store/auth/actions'\r\nimport { KeysMutations } from '@/store/keys/mutations'\r\nimport { AuthRequest } from '@/models/Auth'\r\nimport { CompanyActions } from '@/store/company/actions'\r\n\r\nexport default defineComponent({\r\n\tcomponents:{\r\n\t\tForm,\r\n\t\tField,\r\n\t\tErrorMessage,\r\n\t\tSnackBar\r\n\t},\t\r\n\tsetup(){\r\n\t\tconst store = useStore(key);\r\n\t\tconst router = useRouter();\r\n\t\tconst authData = ref<AuthRequest>({\r\n\t\t\tlogin: '',\r\n\t\t\tpassword: ''\r\n\t\t})\r\n\r\n\t\tconst saved = ref<boolean>(false);\r\n\t\t\r\n\t\tconst loader = computed<boolean>({\r\n\t\t\tget: () => store.getters.getLoader,\r\n\t\t\tset: (val: boolean) => store.commit(KeysMutations.SET_LOADER, val)\r\n\t\t})\r\n\t\t\r\n\t\tdefineRule('required', (value: string) => {\r\n\t\t\tif (!value || !value.length) { \r\n\t\t\t\treturn 'Обязательное поле';\t\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\t\r\n\t\t});\r\n\t\tdefineRule('minLength', (value: string, [limit]: number[]) => {\r\n\t\t\tif (!value || !value.length) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\tif (value.length < limit) {\r\n\t\t\t\treturn `Минимум ${limit} символа`;\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t});\r\n\r\n\t\tlet loginError = computed({\r\n\t\t\tget: () => store.getters.getLoginError,\r\n\t\t\tset: () => store.commit(AuthMutations.CLEAR_LOGIN_ERROR)\r\n\t\t})\r\n\r\n\t\tlet onLogin = () => {\r\n\t\t\tloader.value=true;\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tstore.dispatch(AuthActions.LOGIN, authData.value)\r\n\t\t\t\t\t\t.then(() => {\r\n\t\t\t\t\t\t\tif (saved.value) store.commit(AuthMutations.SET_SAVE_AUTH)\r\n\t\t\t\t\t\t\tstore.commit(AuthMutations.SET_AUTH_LOGIN,authData.value.login)\r\n\t\t\t\t\t\t\tPromise.all([\r\n\t\t\t\t\t\t\t\tstore.dispatch(CompanyActions.GET_COMPANYS),\r\n\t\t\t\t\t\t\t\tstore.dispatch(CompanyActions.GET_MANAGER)\r\n\t\t\t\t\t\t\t])\r\n\t\t\t\t\t\t\t.catch(()=>{\r\n\t\t\t\t\t\t\t\tauthData.value.password = '';\r\n\t\t\t\t\t\t\t\tsetTimeout(() => {loader.value=false;}, 3000);\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t.finally(() => {\r\n\t\t\t\t\t\t\t\tloader.value=false;\r\n\t\t\t\t\t\t\t\trouter.push({name: 'Main'});\r\n\t\t\t\t\t\t\t})\t\t\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t\t.catch(() => {\r\n\t\t\t\t\t\t\tauthData.value.password = '';\r\n\t\t\t\t\t\t\tsetTimeout(() => {loader.value=false;}, 3000);\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}, 500);\r\n\t\t\t\r\n\t\t};\r\n\r\n\r\n\t\treturn {\r\n\t\t\tisAuth: computed(() => store.getters.isAuthenticated),\r\n\t\t\tloginError,\r\n\t\t\tloginErrorMsg: computed(() => store.getters.getLoginErrorMsg),\r\n\t\t\tloader,\r\n\t\t\tauthData,\r\n\t\t\tsaved,\r\n\t\t\tonLogin,\r\n\t\t}\r\n\r\n\t}\r\n});\r\n","import { render } from \"./login.vue?vue&type=template&id=f882fd50&ts=true\"\nimport script from \"./login.vue?vue&type=script&lang=ts\"\nexport * from \"./login.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"M:\\\\lk\\\\node_modules\\\\@vue\\\\cli-service\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}